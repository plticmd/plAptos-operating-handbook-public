"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[3509],{10764:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>n,default:()=>i,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=t(63159),s=t(83581);const a={},n="Global Storage - Structure",c={id:"move/book/global-storage-structure",title:"Global Storage - Structure",description:"The purpose of Move programs is to read from and write to tree-shaped persistent global storage. Programs cannot access the filesystem, network, or any other data outside of this tree.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/move/book/global-storage-structure.md",sourceDirName:"move/book",slug:"/move/book/global-storage-structure",permalink:"/move/book/global-storage-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/move/book/global-storage-structure.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{},sidebar:"appSidebar",previous:{title:"\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8",permalink:"/move/book/unit-testing"},next:{title:"Global Storage - Operators",permalink:"/move/book/global-storage-operators"}},d={},l=[];function u(e){const o={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h1,{id:"global-storage---structure",children:"Global Storage - Structure"}),"\n",(0,r.jsxs)(o.p,{children:["The purpose of Move programs is to ",(0,r.jsx)(o.a,{href:"/move/book/global-storage-operators",children:"read from and write to"})," tree-shaped persistent global storage. Programs cannot access the filesystem, network, or any other data outside of this tree."]}),"\n",(0,r.jsx)(o.p,{children:"In pseudocode, the global storage looks something like:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-move",children:"struct GlobalStorage {\n  resources: Map<(address, ResourceType), ResourceValue>\n  modules: Map<(address, ModuleName), ModuleBytecode>\n}\n"})}),"\n",(0,r.jsxs)(o.p,{children:["Structurally, global storage is a ",(0,r.jsx)(o.a,{href:"https://en.wikipedia.org/wiki/Tree_(graph_theory)",children:"forest"})," consisting of trees rooted at an account ",(0,r.jsx)(o.a,{href:"/move/book/address",children:(0,r.jsx)(o.code,{children:"address"})}),". Each address can store both ",(0,r.jsx)(o.a,{href:"/move/book/structs-and-resources",children:"resource"})," data values and ",(0,r.jsx)(o.a,{href:"/move/book/modules-and-scripts",children:"module"})," code values. As the pseudocode above indicates, each ",(0,r.jsx)(o.code,{children:"address"})," can store at most one resource value of a given type and at most one module with a given name."]})]})}function i(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},83581:(e,o,t)=>{t.d(o,{R:()=>n,x:()=>c});var r=t(11855);const s={},a=r.createContext(s);function n(e){const o=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),r.createElement(a.Provider,{value:o},e.children)}}}]);