"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[6760],{36740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>h});var s=t(63159),a=t(83581),i=t(44517),r=t(32830);const c={title:"Your First Transaction",slug:"your-first-transaction"},o="Your First Transaction",l={id:"tutorials/first-transaction",title:"Your First Transaction",description:"This tutorial describes how to generate and submit transactions to the Aptos blockchain, and verify these submitted transactions. The transfer-coin example used in this tutorial is built with the Aptos SDKs.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/first-transaction.md",sourceDirName:"tutorials",slug:"/tutorials/your-first-transaction",permalink:"/tutorials/your-first-transaction",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/first-transaction.md",tags:[],version:"current",lastUpdatedAt:1713364571,formattedLastUpdatedAt:"2024\u5e744\u670817\u65e5",frontMatter:{title:"Your First Transaction",slug:"your-first-transaction"},sidebar:"appSidebar",previous:{title:"Learn from Tutorials",permalink:"/tutorials/"},next:{title:"Your First NFT",permalink:"/tutorials/your-first-nft"}},d={},h=[{value:"Step 1: Pick an SDK",id:"step-1-pick-an-sdk",level:2},{value:"Step 2: Run the example",id:"step-2-run-the-example",level:2},{value:"Step 3: Understand the output",id:"step-3-understand-the-output",level:2},{value:"Step 4: The SDK in depth",id:"step-4-the-sdk-in-depth",level:2},{value:"Step 4.1: Initializing the clients",id:"step-41-initializing-the-clients",level:3},{value:"Step 4.2: Creating local accounts",id:"step-42-creating-local-accounts",level:3},{value:"Step 4.3: Creating blockchain accounts",id:"step-43-creating-blockchain-accounts",level:3},{value:"Step 4.4: Reading balances",id:"step-44-reading-balances",level:3},{value:"Step 4.5: Transferring",id:"step-45-transferring",level:3},{value:"Step 4.6: Waiting for transaction resolution",id:"step-46-waiting-for-transaction-resolution",level:3},{value:"Supporting documentation",id:"supporting-documentation",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"your-first-transaction",children:"Your First Transaction"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial describes how to generate and submit transactions to the Aptos blockchain, and verify these submitted transactions. The ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example used in this tutorial is built with the Aptos SDKs."]}),"\n",(0,s.jsx)(n.h2,{id:"step-1-pick-an-sdk",children:"Step 1: Pick an SDK"}),"\n",(0,s.jsx)(n.p,{children:"Install your preferred SDK from the below list:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/ts-sdk/",children:"TypeScript SDK"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/python-sdk/",children:"Python SDK"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/rust-sdk/",children:"Rust SDK"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-2-run-the-example",children:"Step 2: Run the example"}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsxs)(n.p,{children:["Clone the ",(0,s.jsx)(n.code,{children:"aptos-ts-sdk"})," repo and build it:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aptos-labs/aptos-ts-sdk.git\ncd aptos-ts-sdk\npnpm install\npnpm build\n"})}),(0,s.jsx)(n.p,{children:"Navigate to the Typescript examples directory:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd examples/typescript\n"})}),(0,s.jsx)(n.p,{children:"Install the necessary dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm install\n"})}),(0,s.jsxs)(n.p,{children:["Run the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-ts-sdk/blob/main/examples/typescript/transfer_coin.ts",children:(0,s.jsx)(n.code,{children:"transfer_coin"})})," example:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm run transfer_coin\n"})})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsxs)(n.p,{children:["Clone the ",(0,s.jsx)(n.code,{children:"aptos-core"})," repo:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aptos-labs/aptos-core.git\n"})}),(0,s.jsx)(n.p,{children:"Navigate to the Python SDK directory:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd aptos-core/ecosystem/python/sdk\n"})}),(0,s.jsx)(n.p,{children:"Install the necessary dependencies:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -sSL https://install.python-poetry.org | python3\npoetry install\n"})}),(0,s.jsxs)(n.p,{children:["Run the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/python/sdk/examples/transfer_coin.py",children:(0,s.jsx)(n.code,{children:"transfer-coin"})})," example:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"poetry run python -m examples.transfer_coin\n"})})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsxs)(n.p,{children:["Clone the ",(0,s.jsx)(n.code,{children:"aptos-core"})," repo:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aptos-labs/aptos-core.git\n"})}),(0,s.jsx)(n.p,{children:"Navigate to the Rust SDK directory:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd aptos-core/sdk\n"})}),(0,s.jsxs)(n.p,{children:["Run the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/sdk/examples/transfer-coin.rs",children:(0,s.jsx)(n.code,{children:"transfer-coin"})})," example:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo run --example transfer-coin\n"})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-3-understand-the-output",children:"Step 3: Understand the output"}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsx)(n.p,{children:"An output very similar to the following will appear after executing the above command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"=== Addresses ===\n\nAlice's address is: 0xbd20517751571ba3fd06326c23761bc0bc69cf450898ffb43412fbe670c28806\nBob's address is: 0x8705f98a74f5efe17740276ed75031927402c3a965e10f2ee16cda46d99d8f7f\n\n=== Initial Balances ===\n\nAlice's balance is: 100000000\nBob's balance is: 0\n\n=== Transfer 1000000 from Alice to Bob ===\n\nCommitted transaction: 0xc0d348afdfc34ae2c48971b253ece727cc9980dde182e2f2c42834552cbbf04c\n\n=== Balances after transfer ===\n\nAlice's balance is: 98899100\nBob's balance is: 1000000\n"})}),(0,s.jsxs)(n.p,{children:["The above output demonstrates that the ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example executes the following steps:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Initializing the Aptos client."}),"\n",(0,s.jsx)(n.li,{children:"The creation of two accounts: Alice and Bob."}),"\n",(0,s.jsx)(n.li,{children:"The funding and creation of Alice's account from a faucet."}),"\n",(0,s.jsx)(n.li,{children:"The transferring of 1000000 coins from Alice to Bob."}),"\n",(0,s.jsx)(n.li,{children:"The 1100900 coins of gas paid for by Alice to make that transfer."}),"\n"]})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsx)(n.p,{children:"An output very similar to the following will appear after executing the above command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"=== Addresses ===\nAlice: 0xbd20517751571ba3fd06326c23761bc0bc69cf450898ffb43412fbe670c28806\nBob: 0x8705f98a74f5efe17740276ed75031927402c3a965e10f2ee16cda46d99d8f7f\n\n=== Initial Balances ===\nAlice: 100000000\nBob: 0\n\n=== Intermediate Balances ===\nAlice: 99944900\nBob: 1000\n\n=== Final Balances ===\nAlice: 99889800\nBob: 2000\n"})}),(0,s.jsxs)(n.p,{children:["The above output demonstrates that the ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example executes the following steps:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Initializing the REST and faucet clients."}),"\n",(0,s.jsx)(n.li,{children:"The creation of two accounts: Alice and Bob."}),"\n",(0,s.jsx)(n.li,{children:"The funding and creation of Alice's account from a faucet."}),"\n",(0,s.jsx)(n.li,{children:"The creation of Bob's account from a faucet."}),"\n",(0,s.jsx)(n.li,{children:"The transferring of 1000 coins from Alice to Bob."}),"\n",(0,s.jsx)(n.li,{children:"The 54100 coins of gas paid for by Alice to make that transfer."}),"\n",(0,s.jsx)(n.li,{children:"Another transfer of 1000 coins from Alice to Bob."}),"\n",(0,s.jsx)(n.li,{children:"The additional 54100 coins of gas paid for by Alice to make that transfer."}),"\n"]}),(0,s.jsx)(n.p,{children:"Now see the below walkthrough of the SDK functions used to accomplish the above steps."})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsx)(n.p,{children:"An output very similar to the following will appear after executing the above command:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"=== Addresses ===\nAlice: 0xbd20517751571ba3fd06326c23761bc0bc69cf450898ffb43412fbe670c28806\nBob: 0x8705f98a74f5efe17740276ed75031927402c3a965e10f2ee16cda46d99d8f7f\n\n=== Initial Balances ===\nAlice: 100000000\nBob: 0\n\n=== Intermediate Balances ===\nAlice: 99944900\nBob: 1000\n\n=== Final Balances ===\nAlice: 99889800\nBob: 2000\n"})}),(0,s.jsxs)(n.p,{children:["The above output demonstrates that the ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example executes the following steps:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Initializing the REST and faucet clients."}),"\n",(0,s.jsx)(n.li,{children:"The creation of two accounts: Alice and Bob."}),"\n",(0,s.jsx)(n.li,{children:"The funding and creation of Alice's account from a faucet."}),"\n",(0,s.jsx)(n.li,{children:"The creation of Bob's account from a faucet."}),"\n",(0,s.jsx)(n.li,{children:"The transferring of 1000 coins from Alice to Bob."}),"\n",(0,s.jsx)(n.li,{children:"The 54100 coins of gas paid for by Alice to make that transfer."}),"\n",(0,s.jsx)(n.li,{children:"Another transfer of 1000 coins from Alice to Bob."}),"\n",(0,s.jsx)(n.li,{children:"The additional 54100 coins of gas paid for by Alice to make that transfer."}),"\n"]}),(0,s.jsx)(n.p,{children:"Now see the below walkthrough of the SDK functions used to accomplish the above steps."})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"step-4-the-sdk-in-depth",children:"Step 4: The SDK in depth"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example code uses helper functions to interact with the ",(0,s.jsx)(n.a,{href:"https://aptos.dev/nodes/aptos-api-spec#/",children:"REST API"}),". This section reviews each of the calls and gives insights into functionality."]}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsx)(r.A,{value:"typescript",label:"Typescript",children:(0,s.jsx)(n.admonition,{title:"See the full code",type:"tip",children:(0,s.jsxs)(n.p,{children:["See the TypeScript ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-ts-sdk/blob/main/examples/typescript/transfer_coin.ts",children:(0,s.jsx)(n.code,{children:"transfer_coin"})})," for the complete code as you follow the below steps."]})})}),(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(n.admonition,{title:"See the full code",type:"tip",children:(0,s.jsxs)(n.p,{children:["See the Python ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/ecosystem/python/sdk/examples/transfer_coin.py",children:(0,s.jsx)(n.code,{children:"transfer_coin"})})," for the complete code as you follow the below steps."]})})}),(0,s.jsx)(r.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.admonition,{title:"See the full code",type:"tip",children:(0,s.jsxs)(n.p,{children:["See the Rust ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/sdk/examples/transfer-coin.rs",children:(0,s.jsx)(n.code,{children:"transfer-coin"})})," for the complete code as you follow the below steps."]})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-41-initializing-the-clients",children:"Step 4.1: Initializing the clients"}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsxs)(n.p,{children:["In the first step, the ",(0,s.jsx)(n.code,{children:"transfer_coin"})," example initializes the Aptos client:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const APTOS_NETWORK: Network =\n  NetworkToNetworkName[process.env.APTOS_NETWORK] || Network.DEVNET;\nconst config = new AptosConfig({ network: APTOS_NETWORK });\nconst aptos = new Aptos(config);\n"})}),(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["By default, the Aptos client points to Aptos devnet services. However, it can be configured with the ",(0,s.jsx)(n.code,{children:"network"})," input argument"]})})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsxs)(n.p,{children:["In the first step, the ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example initializes both the REST and faucet clients:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The REST client interacts with the REST API."}),"\n",(0,s.jsx)(n.li,{children:"The faucet client interacts with the devnet Faucet service for creating and funding accounts."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"rest_client = RestClient(NODE_URL)\nfaucet_client = FaucetClient(FAUCET_URL, rest_client)  \n"})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/tree/main/ecosystem/python/sdk/examples/common.py",children:(0,s.jsx)(n.code,{children:"common.py"})})," initializes these values as follows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'NODE_URL = os.getenv("APTOS_NODE_URL", "https://api.devnet.aptoslabs.com/v1")\nFAUCET_URL = os.getenv(\n    "APTOS_FAUCET_URL",\n    "https://faucet.devnet.aptoslabs.com",\n)  \n'})}),(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"By default, the URLs for both the services point to Aptos devnet services. However, they can be configured with the following environment variables:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"APTOS_NODE_URL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"APTOS_FAUCET_URL"})}),"\n"]})]})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsxs)(n.p,{children:["In the first step, the ",(0,s.jsx)(n.code,{children:"transfer-coin"})," example initializes both the REST and faucet clients:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The REST client interacts with the REST API."}),"\n",(0,s.jsx)(n.li,{children:"The faucet client interacts with the devnet Faucet service for creating and funding accounts."}),"\n"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let rest_client = Client::new(NODE_URL.clone());\nlet faucet_client = FaucetClient::new(FAUCET_URL.clone(), NODE_URL.clone()); \n"})}),(0,s.jsxs)(n.p,{children:["Using the API client we can create a ",(0,s.jsx)(n.code,{children:"CoinClient"}),", which we use for common coin operations such as transferring coins and checking balances."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let coin_client = CoinClient::new(&rest_client); \n"})}),(0,s.jsx)(n.p,{children:"In the example we initialize the URL values as such:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'static NODE_URL: Lazy<Url> = Lazy::new(|| {\n    Url::from_str(\n        std::env::var("APTOS_NODE_URL")\n            .as_ref()\n            .map(|s| s.as_str())\n            .unwrap_or("https://api.devnet.aptoslabs.com"),\n    )\n    .unwrap()\n});\n\nstatic FAUCET_URL: Lazy<Url> = Lazy::new(|| {\n    Url::from_str(\n        std::env::var("APTOS_FAUCET_URL")\n            .as_ref()\n            .map(|s| s.as_str())\n            .unwrap_or("https://faucet.devnet.aptoslabs.com"),\n    )\n    .unwrap()\n});\n'})}),(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"By default, the URLs for both the services point to Aptos devnet services. However, they can be configured with the following environment variables:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"APTOS_NODE_URL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"APTOS_FAUCET_URL"})}),"\n"]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-42-creating-local-accounts",children:"Step 4.2: Creating local accounts"}),"\n",(0,s.jsxs)(n.p,{children:["The next step is to create two accounts locally. ",(0,s.jsx)(n.a,{href:"/concepts/accounts",children:"Accounts"})," represent both on and off-chain state. Off-chain state consists of an address and the public/private key pair used to authenticate ownership. This step demonstrates how to generate that off-chain state."]}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsx)(r.A,{value:"typescript",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const alice = Account.generate();\nconst bob = Account.generate();\n"})})}),(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"alice = Account.generate()\nbob = Account.generate()  \n"})})}),(0,s.jsx)(r.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let mut alice = LocalAccount::generate(&mut rand::rngs::OsRng);\nlet bob = LocalAccount::generate(&mut rand::rngs::OsRng); \n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-43-creating-blockchain-accounts",children:"Step 4.3: Creating blockchain accounts"}),"\n",(0,s.jsx)(n.p,{children:"In Aptos, each account must have an on-chain representation in order to receive tokens and coins and interact with other dapps. An account represents a medium for storing assets; hence, it must be explicitly created. This example leverages the Faucet to create and fund Alice's account and to create but not fund Bob's account:"}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsx)(r.A,{value:"typescript",label:"Typescript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await aptos.fundAccount({\n  accountAddress: alice.accountAddress,\n  amount: 100_000_000,\n});\n"})})}),(0,s.jsx)(r.A,{value:"python",label:"Python",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"alice_fund = faucet_client.fund_account(alice.address(), 100_000_000)\nbob_fund = faucet_client.fund_account(bob.address(), 0)  \n"})})}),(0,s.jsx)(r.A,{value:"rust",label:"Rust",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'faucet_client\n    .fund(alice.address(), 100_000_000)\n    .await\n    .context("Failed to fund Alice\'s account")?;\nfaucet_client\n    .create_account(bob.address())\n    .await\n    .context("Failed to fund Bob\'s account")?; \n'})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-44-reading-balances",children:"Step 4.4: Reading balances"}),"\n",(0,s.jsx)(n.p,{children:"In this step, the SDK translates a single call into the process of querying a resource and reading a field from that resource."}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const aliceBalance = await balance("Alice", alice.accountAddress);\nconst bobBalance = await balance("Bob", bob.accountAddress);\n'})}),(0,s.jsxs)(n.p,{children:["Behind the scenes, the ",(0,s.jsx)(n.code,{children:"balance"})," function uses the SDK ",(0,s.jsx)(n.code,{children:"getAccountAPTAmount"})," function that queries the Indexer service and reads the current stored value:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const balance = async (\n  name: string,\n  accountAddress: AccountAddress,\n): Promise<number> => {\n  const amount = await aptos.getAccountAPTAmount({\n    accountAddress,\n  });\n  console.log(`${name}'s balance is: ${amount}`);\n  return amount;\n};\n"})})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'alice_balance = rest_client.account_balance(alice.address())\nbob_balance = rest_client.account_balance(bob.address())\n[alice_balance, bob_balance] = await asyncio.gather(*[alice_balance, bob_balance])\nprint(f"Alice: {alice_balance}")\nprint(f"Bob: {bob_balance}")  \n'})}),(0,s.jsx)(n.p,{children:"Behind the scenes, the SDK queries the CoinStore resource for the AptosCoin and reads the current stored value:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def account_balance(self, account_address: str) -> int:\n    """Returns the test coin balance associated with the account"""\n    return self.account_resource(\n        account_address, "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>"\n    )["data"]["coin"]["value"]\n'})})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'println!(\n    "Alice: {:?}",\n    coin_client\n        .get_account_balance(&alice.address())\n        .await\n        .context("Failed to get Alice\'s account balance the second time")?\n);\nprintln!(\n    "Bob: {:?}",\n    coin_client\n        .get_account_balance(&bob.address())\n        .await\n        .context("Failed to get Bob\'s account balance the second time")?\n); \n'})}),(0,s.jsx)(n.p,{children:"Behind the scenes, the SDK queries the CoinStore resource for the AptosCoin and reads the current stored value:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let balance = self\n    .get_account_resource(address, "0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>")\n    .await?;\n'})})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-45-transferring",children:"Step 4.5: Transferring"}),"\n",(0,s.jsxs)(n.p,{children:["Like the previous step, this is another helper step that constructs a transaction transferring the coins from Alice to Bob. The SDK provides a helper function to generate a ",(0,s.jsx)(n.code,{children:"transferCoinTransaction"})," transaction that can be simulated or submitted to chain. Once a transaction has been submitted to chain, the API will return a transaction hash that can be used in the subsequent step to check on the transaction status. The Aptos blockchain does perform a handful of validation checks on submission; and if any of those fail, the user will instead be given an error. These validations use the transaction signature and unused sequence number, and submitting the transaction to the appropriate chain."]}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const transaction = await aptos.transferCoinTransaction({\n  sender: alice,\n  recipient: bob.accountAddress,\n  amount: TRANSFER_AMOUNT,\n});\nconst pendingTxn = await aptos.signAndSubmitTransaction({\n  signer: alice,\n  transaction,\n});\n"})}),(0,s.jsxs)(n.p,{children:["Behind the scenes, the ",(0,s.jsx)(n.code,{children:"transferCoinTransaction"})," function generates a transaction payload that can be simulated or submitted to chain:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export async function transferCoinTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  recipient: AccountAddressInput;\n  amount: AnyNumber;\n  coinType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SingleSignerTransaction> {\n  const { aptosConfig, sender, recipient, amount, coinType, options } = args;\n  const coinStructType = coinType ?? APTOS_COIN;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: "0x1::aptos_account::transfer_coins",\n      typeArguments: [coinStructType],\n      functionArguments: [recipient, amount],\n    },\n    options,\n  });\n\n  return transaction;\n}\n'})}),(0,s.jsx)(n.p,{children:"Breaking the above down into pieces:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"transfer_coins"})," internally is a ",(0,s.jsx)(n.code,{children:"EntryFunction"})," in the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/aptos_account.move#L92",children:"Aptos Account Move module"}),", i.e. an entry function in Move that is directly callable."]}),"\n",(0,s.jsxs)(n.li,{children:["The Move function is stored on the aptos_account module: ",(0,s.jsx)(n.code,{children:"0x1::aptos_account"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"transfer_coins"})," functions uses the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/coin.move",children:"Coin Move module"})]}),"\n",(0,s.jsxs)(n.li,{children:["Because the Coin module can be used by other coins, the ",(0,s.jsx)(n.code,{children:"transferCoinTransaction"})," must explicitly specify which coin type to transfer. If not specified with ",(0,s.jsx)(n.code,{children:"coinType"})," it defaults to ",(0,s.jsx)(n.code,{children:"0x1::aptos_coin::AptosCoin"}),"."]}),"\n"]})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsx)(n.p,{children:"Like the previous step, this is another helper step that constructs a transaction transferring the coins from Alice to Bob. For correctly generated transactions, the API will return a transaction hash that can be used in the subsequent step to check on the transaction status. The Aptos blockchain does perform a handful of validation checks on submission; and if any of those fail, the user will instead be given an error. These validations use the transaction signature and unused sequence number, and submitting the transaction to the appropriate chain."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"txn_hash = await rest_client.transfer(alice, bob.address(), 1_000)  \n"})}),(0,s.jsx)(n.p,{children:"Behind the scenes the Python SDK generates, signs, and submits a transaction:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'async def bcs_transfer(\n    self,\n    sender: Account,\n    recipient: AccountAddress,\n    amount: int,\n    sequence_number: Optional[int] = None,\n) -> str:\n    transaction_arguments = [\n        TransactionArgument(recipient, Serializer.struct),\n        TransactionArgument(amount, Serializer.u64),\n    ]\n\n    payload = EntryFunction.natural(\n        "0x1::aptos_account",\n        "transfer",\n        [],\n        transaction_arguments,\n    )\n\n    signed_transaction = await self.create_bcs_signed_transaction(\n        sender, TransactionPayload(payload), sequence_number=sequence_number\n    )\n    return await self.submit_bcs_transaction(signed_transaction)  \n'})}),(0,s.jsx)(n.p,{children:"Breaking the above down into pieces:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"transfer"})," internally is a ",(0,s.jsx)(n.code,{children:"EntryFunction"})," in the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/coin.move#L412",children:"Coin Move module"}),", i.e. an entry function in Move that is directly callable."]}),"\n",(0,s.jsxs)(n.li,{children:["The Move function is stored on the coin module: ",(0,s.jsx)(n.code,{children:"0x1::coin"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Because the Coin module can be used by other coins, the transfer must explicitly use a ",(0,s.jsx)(n.code,{children:"TypeTag"})," to define which coin to transfer."]}),"\n",(0,s.jsxs)(n.li,{children:["The transaction arguments must be placed into ",(0,s.jsx)(n.code,{children:"TransactionArgument"}),"s with type specifiers (",(0,s.jsx)(n.code,{children:"Serializer.{type}"}),"), that will serialize the value into the appropriate type at transaction generation time."]}),"\n"]})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsx)(n.p,{children:"Like the previous step, this is another helper step that constructs a transaction transferring the coins from Alice to Bob. For correctly generated transactions, the API will return a transaction hash that can be used in the subsequent step to check on the transaction status. The Aptos blockchain does perform a handful of validation checks on submission; and if any of those fail, the user will instead be given an error. These validations use the transaction signature and unused sequence number, and submitting the transaction to the appropriate chain."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let txn_hash = coin_client\n    .transfer(&mut alice, bob.address(), 1_000, None)\n    .await\n    .context("Failed to submit transaction to transfer coins")?; \n'})}),(0,s.jsx)(n.p,{children:"Behind the scenes the Rust SDK generates, signs, and submits a transaction:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let chain_id = self\n    .api_client\n    .get_index()\n    .await\n    .context("Failed to get chain ID")?\n    .inner()\n    .chain_id;\nlet transaction_builder = TransactionBuilder::new(\n    TransactionPayload::EntryFunction(EntryFunction::new(\n        ModuleId::new(AccountAddress::ONE, Identifier::new("coin").unwrap()),\n        Identifier::new("transfer").unwrap(),\n        vec![TypeTag::from_str(options.coin_type).unwrap()],\n        vec![\n            bcs::to_bytes(&to_account).unwrap(),\n            bcs::to_bytes(&amount).unwrap(),\n        ],\n    )),\n    SystemTime::now()\n        .duration_since(UNIX_EPOCH)\n        .unwrap()\n        .as_secs()\n        + options.timeout_secs,\n    ChainId::new(chain_id),\n)\n.sender(from_account.address())\n.sequence_number(from_account.sequence_number())\n.max_gas_amount(options.max_gas_amount)\n.gas_unit_price(options.gas_unit_price);\nlet signed_txn = from_account.sign_with_transaction_builder(transaction_builder);\nOk(self\n    .api_client\n    .submit(&signed_txn)\n    .await\n    .context("Failed to submit transfer transaction")?\n    .into_inner())\n\n'})}),(0,s.jsx)(n.p,{children:"Breaking the above down into pieces:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"First, we fetch the chain ID, necessary for building the transaction payload."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"transfer"})," internally is a ",(0,s.jsx)(n.code,{children:"EntryFunction"})," in the ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/aptos-move/framework/aptos-framework/sources/coin.move#L412",children:"Coin Move module"}),", i.e. an entry function in Move that is directly callable."]}),"\n",(0,s.jsxs)(n.li,{children:["The Move function is stored on the coin module: ",(0,s.jsx)(n.code,{children:"0x1::coin"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Because the Coin module can be used by other coins, the transfer must explicitly use a ",(0,s.jsx)(n.code,{children:"TypeTag"})," to define which coin to transfer."]}),"\n",(0,s.jsxs)(n.li,{children:["The transaction arguments, such as ",(0,s.jsx)(n.code,{children:"to_account"})," and ",(0,s.jsx)(n.code,{children:"amount"}),", must be encoded as BCS to use with the ",(0,s.jsx)(n.code,{children:"TransactionBuilder"}),"."]}),"\n"]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step-46-waiting-for-transaction-resolution",children:"Step 4.6: Waiting for transaction resolution"}),"\n",(0,s.jsxs)(i.A,{groupId:"sdk-examples",children:[(0,s.jsxs)(r.A,{value:"typescript",label:"Typescript",children:[(0,s.jsxs)(n.p,{children:["In the TypeScript SDK, just calling ",(0,s.jsx)(n.code,{children:"waitForTransaction"})," is sufficient to wait for the transaction to complete. The function will return the ",(0,s.jsx)(n.code,{children:"Transaction"})," returned by the API once it is processed (either successfully or unsuccessfully) or throw an error if processing time exceeds the timeout."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const response = await aptos.waitForTransaction({\n  transactionHash: pendingTxn.hash,\n});\n"})})]}),(0,s.jsxs)(r.A,{value:"python",label:"Python",children:[(0,s.jsx)(n.p,{children:"The transaction hash can be used to query the status of a transaction:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"await rest_client.wait_for_transaction(txn_hash)  \n"})})]}),(0,s.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,s.jsx)(n.p,{children:"The transaction hash can be used to query the status of a transaction:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'rest_client\n    .wait_for_transaction(&txn_hash)\n    .await\n    .context("Failed when waiting for the transfer transaction")?; \n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"supporting-documentation",children:"Supporting documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/concepts/accounts",children:"Account basics"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/ts-sdk/",children:"TypeScript SDK"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/python-sdk/",children:"Python SDK"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/sdks/rust-sdk/",children:"Rust SDK"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://aptos.dev/nodes/aptos-api-spec#/",children:"REST API specification"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},32830:(e,n,t)=>{t.d(n,{A:()=>r});t(11855);var s=t(51038);const a={tabItem:"tabItem_fjQ6"};var i=t(63159);function r(e){let{children:n,hidden:t,className:r}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,r),hidden:t,children:n})}},44517:(e,n,t)=>{t.d(n,{A:()=>A});var s=t(11855),a=t(51038),i=t(94663),r=t(53178),c=t(42394),o=t(31560),l=t(54169),d=t(76315);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function x(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=u(e),[r,o]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[l,h]=x({queryString:t,groupId:a}),[f,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,d.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),m=(()=>{const e=l??f;return p({value:e,tabValues:i})?e:null})();(0,c.A)((()=>{m&&o(m)}),[m]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),b(e)}),[h,b,i]),tabValues:i}}var b=t(39634);const m={tabList:"tabList__eIX",tabItem:"tabItem_SzJH"};var j=t(63159);function g(e){let{className:n,block:t,selectedValue:s,selectValue:r,tabValues:c}=e;const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=o.indexOf(n),a=c[t].value;a!==s&&(l(n),r(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:c.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>o.push(e),onKeyDown:h,onClick:d,...i,className:(0,a.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function y(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=f(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",m.tabList),children:[(0,j.jsx)(g,{...e,...n}),(0,j.jsx)(y,{...e,...n})]})}function A(e){const n=(0,b.A)();return(0,j.jsx)(v,{...e,children:h(e.children)},String(n))}},83581:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(11855);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);