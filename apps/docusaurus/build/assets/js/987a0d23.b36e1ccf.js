"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[8889],{45242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var s=n(63159),o=n(83581);const c={title:"4. Fetch Data from Chain",id:"fetch-data-from-chain"},a="4. Fetch Data from Chain",r={id:"tutorials/build-e2e-dapp/fetch-data-from-chain",title:"4. Fetch Data from Chain",description:"In the fourth chapter of the tutorial on building an end-to-end dapp on Aptos, you will be learning to fetch data from chain.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/build-e2e-dapp/4-fetch-data-from-chain.md",sourceDirName:"tutorials/build-e2e-dapp",slug:"/tutorials/build-e2e-dapp/fetch-data-from-chain",permalink:"/tutorials/build-e2e-dapp/fetch-data-from-chain",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/build-e2e-dapp/4-fetch-data-from-chain.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",sidebarPosition:4,frontMatter:{title:"4. Fetch Data from Chain",id:"fetch-data-from-chain"},sidebar:"appSidebar",previous:{title:"3. Add Wallet Support",permalink:"/tutorials/build-e2e-dapp/add-wallet-support"},next:{title:"5. Submit Data to Chain",permalink:"/tutorials/build-e2e-dapp/submit-data-to-chain"}},i={},d=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"4-fetch-data-from-chain",children:"4. Fetch Data from Chain"}),"\n",(0,s.jsxs)(t.p,{children:["In the fourth chapter of the tutorial on ",(0,s.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/e2e-dapp-index",children:"building an end-to-end dapp on Aptos"}),", you will be learning to fetch data from chain."]}),"\n",(0,s.jsx)(t.p,{children:"Our UI logic relies on whether the connected account has created a todo list. If the account has created a todo list, our app should display that list; if not, the app should display a button offering the option to create a new list."}),"\n",(0,s.jsxs)(t.p,{children:["For that, we first need to check if the connected account has a ",(0,s.jsx)(t.code,{children:"TodoList"})," resource. In our smart contract, whenever someone creates a todo list we create and assign a ",(0,s.jsx)(t.code,{children:"TodoList"})," resource to their account."]}),"\n",(0,s.jsxs)(t.p,{children:["To fetch data from chain, we can use the ",(0,s.jsx)(t.a,{href:"/sdks/ts-sdk/",children:"Aptos TypeScript SDK"}),". The SDK provides classes and functions for us to easily interact and query the Aptos chain."]}),"\n",(0,s.jsx)(t.p,{children:"To get started:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Stop the local server if running."}),"\n",(0,s.jsxs)(t.li,{children:["In the ",(0,s.jsx)(t.code,{children:"client"})," directory, run: ",(0,s.jsx)(t.code,{children:"npm i @aptos-labs/ts-sdk"})]}),"\n",(0,s.jsxs)(t.li,{children:["In the ",(0,s.jsx)(t.code,{children:"App.tsx"})," file, import the ",(0,s.jsx)(t.code,{children:"Aptos"})," class like so:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import { Aptos } from "@aptos-labs/ts-sdk";\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The TypeScript SDK provides us with a ",(0,s.jsx)(t.code,{children:"Aptos"})," class which is the main entry point into Aptos's API. By initializing ",(0,s.jsx)(t.code,{children:"Aptos"})," we can query the Aptos chain."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Read more about the ",(0,s.jsx)(t.a,{href:"/sdks/ts-sdk/sdk-configuration",children:(0,s.jsx)(t.code,{children:"Aptos"})})," class in the Aptos TypeScript SDK docs."]})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["In the ",(0,s.jsx)(t.code,{children:"App.tsx"})," file, add:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const aptos = new Aptos();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will initialize a ",(0,s.jsx)(t.code,{children:"Aptos"})," instance for us."]}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["By default, ",(0,s.jsx)(t.code,{children:"Aptos"})," will interact with the ",(0,s.jsx)(t.code,{children:"devnet"})," network, to set up a ",(0,s.jsx)(t.a,{href:"/guides/system-integrators-guide#choose-a-network",children:"different network"}),", we can use ",(0,s.jsx)(t.code,{children:"AptosConfig"})," class."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import { Aptos, AptosConfig, Network } from "@aptos-labs/ts-sdk";\n\nconst aptosConfig = new AptosConfig({ network: Network.MAINNET });\nconst aptos = new Aptos(aptosConfig);\n'})})]}),"\n",(0,s.jsxs)(t.p,{children:["Our app displays different UIs based on a user resource (i.e if a user has a list \u21d2 if a user has a ",(0,s.jsx)(t.code,{children:"TodoList"})," resource). For that, we need to know the current account connected to our app."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Import wallet from the wallet adapter React provider:"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import { useWallet } from "@aptos-labs/wallet-adapter-react";\n'})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"Extract the account object from the wallet adapter:"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"function App (\n\tconst { account } = useWallet();\n\t...\n)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"account"})," object is ",(0,s.jsx)(t.code,{children:"null"})," if there is no account connected; when an account is connected, the ",(0,s.jsx)(t.code,{children:"account"})," object holds the account information, including the account address."]}),"\n",(0,s.jsxs)(t.ol,{start:"3",children:["\n",(0,s.jsxs)(t.li,{children:["Next, we want to fetch the account\u2019s TodoList resource.\nBegin by importing ",(0,s.jsx)(t.code,{children:"useEffect"})," by using ",(0,s.jsx)(t.code,{children:'jsx import useEffect from "react"; '}),"\nLet\u2019s add a ",(0,s.jsx)(t.code,{children:"useEffect"})," hook to our file that would call a function to fetch the resource whenever our account address changes:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"function App() {\n  ...\n  useEffect(() => {\n    fetchList();\n  }, [account?.address]);\n  ...\n}\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsxs)(t.li,{children:["Before creating our ",(0,s.jsx)(t.code,{children:"fetchList"})," function, let\u2019s also create a local state to store whether the account has a list:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"function App (\n  ...\n  const [accountHasList, setAccountHasList] = useState<boolean>(false);\n  ...\n)\n"})}),"\n",(0,s.jsxs)(t.p,{children:["also import ",(0,s.jsx)(t.code,{children:"useEffect"})," using\n",(0,s.jsx)(t.code,{children:'import { useState, useEffect } from "react"; '})]}),"\n",(0,s.jsxs)(t.ol,{start:"5",children:["\n",(0,s.jsxs)(t.li,{children:["Our ",(0,s.jsx)(t.code,{children:"useEffect"})," hook is calling a ",(0,s.jsx)(t.code,{children:"fetchList"})," function; let\u2019s create it:"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'const fetchList = async () => {\n  if (!account) return [];\n  // change this to be your module account address\n  const moduleAddress = "0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018";\n  try {\n    const todoListResource = await aptos.getAccountResource(\n      {\n        accountAddress:account?.address,\n        resourceType:`${moduleAddress}::todolist::TodoList`\n      }\n    );\n    setAccountHasList(true);\n  } catch (e: any) {\n    setAccountHasList(false);\n  }\n};\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"moduleAddress"})," is the address we publish the module under, i.e the account address you have in your ",(0,s.jsx)(t.code,{children:"Move.toml"})," file (",(0,s.jsx)(t.code,{children:"myaddr"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"provider.getAccountResource()"}),"expects an ",(0,s.jsx)(t.em,{children:"account address"})," that holds the resource we are looking for and a string representation of an on-chain ",(0,s.jsx)(t.em,{children:"Move struct type"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"account address - is the current connected account (we are getting it from the wallet account object)"}),"\n",(0,s.jsxs)(t.li,{children:["Move struct type string syntax:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The account address who holds the move module = our profile account address (You might want to change the ",(0,s.jsx)(t.code,{children:"moduleAddress"})," const to be your own account address)"]}),"\n",(0,s.jsxs)(t.li,{children:["The module name the resource lives in = ",(0,s.jsx)(t.code,{children:"todolist"})]}),"\n",(0,s.jsxs)(t.li,{children:["The resource name = ",(0,s.jsx)(t.code,{children:"TodoList"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If the request succeeds and there is a resource for that account, we want to set our local state to ",(0,s.jsx)(t.code,{children:"true"}),"; otherwise, we would set it to ",(0,s.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(t.ol,{start:"6",children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Let\u2019s update ",(0,s.jsx)(t.code,{children:'import { Layout, Row, Col } from "antd"; '})," to import Button:\n",(0,s.jsx)(t.code,{children:'import { Layout, Row, Col, Button  } from "antd"; '})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Let\u2019s update our UI based on the ",(0,s.jsx)(t.code,{children:"accountHasList"})," state:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'return (\n  <>\n    <Layout>\n      <Row align="middle">\n        <Col span={10} offset={2}>\n          <h1>Our todolist</h1>\n        </Col>\n        <Col span={12} style={{ textAlign: "right", paddingRight: "200px" }}>\n          <WalletSelector />\n        </Col>\n      </Row>\n    </Layout>\n    {!accountHasList && (\n      <Row gutter={[0, 32]} style={{ marginTop: "2rem" }}>\n        <Col span={8} offset={8}>\n          <Button\n            block\n            type="primary"\n            style={{ height: "40px", backgroundColor: "#3f67ff" }}\n          >\n            Add new list\n          </Button>\n        </Col>\n      </Row>\n    )}\n  </>\n);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["We now have an ",(0,s.jsx)(t.strong,{children:"Add new list"})," button that appears only if the account doesn\u2019t have a list."]}),"\n",(0,s.jsxs)(t.p,{children:["Start the local server with ",(0,s.jsx)(t.code,{children:"npm start"}),". You should see the ",(0,s.jsx)(t.strong,{children:"Add new list"})," button."]}),"\n",(0,s.jsxs)(t.p,{children:["Next, let\u2019s understand how to create a new list by ",(0,s.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/submit-data-to-chain",children:"submitting data to chain"})," in chapter 5."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},83581:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(11855);const o={},c=s.createContext(o);function a(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);