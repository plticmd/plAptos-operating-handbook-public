"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[5738],{50353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>i});var s=t(63159),a=t(83581);const o={title:"6. Handle Tasks",id:"handle-tasks"},d="6. Handle Tasks",c={id:"tutorials/build-e2e-dapp/handle-tasks",title:"6. Handle Tasks",description:"In the sixth and final chapter of the tutorial on building an end-to-end dapp on Aptos, you will add functionality to the app so the user interface is able to handle cases where an account has created a list.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/build-e2e-dapp/6-handle-tasks.md",sourceDirName:"tutorials/build-e2e-dapp",slug:"/tutorials/build-e2e-dapp/handle-tasks",permalink:"/tutorials/build-e2e-dapp/handle-tasks",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/build-e2e-dapp/6-handle-tasks.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",sidebarPosition:6,frontMatter:{title:"6. Handle Tasks",id:"handle-tasks"},sidebar:"appSidebar",previous:{title:"5. Submit Data to Chain",permalink:"/tutorials/build-e2e-dapp/submit-data-to-chain"},next:{title:"Advanced Builder Guides",permalink:"/category/advanced-builders"}},r={},i=[{value:"Fetch tasks",id:"fetch-tasks",level:2},{value:"Add task",id:"add-task",level:2},{value:"Mark task as completed",id:"mark-task-as-completed",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"6-handle-tasks",children:"6. Handle Tasks"}),"\n",(0,s.jsxs)(n.p,{children:["In the sixth and final chapter of the tutorial on ",(0,s.jsx)(n.a,{href:"/tutorials/build-e2e-dapp/e2e-dapp-index",children:"building an end-to-end dapp on Aptos"}),", you will add functionality to the app so the user interface is able to handle cases where an account has created a list."]}),"\n",(0,s.jsxs)(n.p,{children:["We have covered how to ",(0,s.jsx)(n.a,{href:"/tutorials/build-e2e-dapp/fetch-data-from-chain",children:"fetch data"})," (an account\u2019s todo list) from chain and how to ",(0,s.jsx)(n.a,{href:"/tutorials/build-e2e-dapp/submit-data-to-chain",children:"submit a transaction"})," (new todo list) to chain using Wallet."]}),"\n",(0,s.jsx)(n.p,{children:"Let\u2019s finish building our app by implementing fetch tasks and adding a task function."}),"\n",(0,s.jsx)(n.h2,{id:"fetch-tasks",children:"Fetch tasks"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Create a local state ",(0,s.jsx)(n.code,{children:"tasks"})," that will hold our tasks. It will be a state of a Task type (that has the same properties we set on our smart contract):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"type Task = {\n  address: string;\n  completed: boolean;\n  content: string;\n  task_id: string;\n};\n\nfunction App() {\n\tconst [tasks, setTasks] = useState<Task[]>([]);\n\t...\n}\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Update our ",(0,s.jsx)(n.code,{children:"fetchList"})," function to fetch the tasks in the account\u2019s ",(0,s.jsx)(n.code,{children:"TodoList"})," resource:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const fetchList = async () => {\n  if (!account) return [];\n  try {\n    const todoListResource = await aptos.getAccountResource(\n        {accountAddress:account?.address,\n          resourceType:`${moduleAddress}::todolist::TodoList`}\n      );\n    setAccountHasList(true);\n\t\t// tasks table handle\n    const tableHandle = (todoListResource as any).tasks.handle;\n\t\t// tasks table counter\n    const taskCounter = (todoListResource as any).task_counter;\n\n    let tasks = [];\n    let counter = 1;\n    while (counter <= taskCounter) {\n      const tableItem = {\n        key_type: "u64",\n        value_type: `${moduleAddress}::todolist::Task`,\n        key: `${counter}`,\n      };\n      const task = await aptos.getTableItem<Task>({handle:tableHandle, data:tableItem});\n      tasks.push(task);\n      counter++;\n    }\n\t\t// set tasks in local state\n    setTasks(tasks);\n  } catch (e: any) {\n    setAccountHasList(false);\n  }\n};\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"This part is a bit confusing, so stick with us!"})}),"\n",(0,s.jsxs)(n.p,{children:["Tasks are stored in a table (this is how we built our contract). To fetch a table item (i.e a task), we need that task's table handle. We also need the ",(0,s.jsx)(n.code,{children:"task_counter"})," in that resource so we can loop over and fetch the task with the ",(0,s.jsx)(n.code,{children:"task_id"})," that matches the ",(0,s.jsx)(n.code,{children:"task_counter"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const tableHandle = (TodoListResource as any).data.tasks.handle;\nconst taskCounter = (TodoListResource as any).data.task_counter;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have our tasks table handle and our ",(0,s.jsx)(n.code,{children:"task_counter"})," variable, lets loop over the ",(0,s.jsx)(n.code,{children:"taskCounter"})," . We define a ",(0,s.jsx)(n.code,{children:"counter"})," and set it to 1 as the task_counter / task_id is never less than 1."]}),"\n",(0,s.jsxs)(n.p,{children:["We loop while the ",(0,s.jsx)(n.code,{children:"counter"})," is less then the ",(0,s.jsx)(n.code,{children:"taskCounter"})," and fetch the table item and push it to the tasks array:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'let tasks = [];\nlet counter = 1;\nwhile (counter <= taskCounter) {\n  const tableItem = {\n    key_type: "u64",\n    value_type: `${moduleAddress}::todolist::Task`,\n    key: `${counter}`,\n  };\n  const task = await provider.getTableItem(tableHandle, tableItem);\n  tasks.push(task);\n  counter++;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We build a ",(0,s.jsx)(n.code,{children:"tableItem"})," object to fetch. If we take a look at our table structure from the contract:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"tasks: Table<u64, Task>,\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We see that it has a ",(0,s.jsx)(n.code,{children:"key"})," type ",(0,s.jsx)(n.code,{children:"u64"})," and a ",(0,s.jsx)(n.code,{children:"value"})," of type ",(0,s.jsx)(n.code,{children:"Task"}),". And whenever we create a new task, we assign the ",(0,s.jsx)(n.code,{children:"key"})," to be the incremented task counter."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// adds the new task into the tasks table\ntable::upsert(&mut todo_list.tasks, counter, new_task);\n"})}),"\n",(0,s.jsx)(n.p,{children:"So the object we built is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  key_type: "u64",\n  value_type:`${moduleAddress}::todolist::Task`,\n  key: `${taskCounter}`,\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Where ",(0,s.jsx)(n.code,{children:"key_type"})," is the table ",(0,s.jsx)(n.code,{children:"key"})," type, ",(0,s.jsx)(n.code,{children:"key"})," is the key value we are looking for, and the ",(0,s.jsx)(n.code,{children:"value_type"})," is the table ",(0,s.jsx)(n.code,{children:"value"})," which is a ",(0,s.jsx)(n.code,{children:"Task"})," struct. The Task struct uses the same format from our previous resource query:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The account address who holds that module = our profile account address"}),"\n",(0,s.jsxs)(n.li,{children:["The module name the resource lives in = ",(0,s.jsx)(n.code,{children:"todolist"})]}),"\n",(0,s.jsxs)(n.li,{children:["The struct name = ",(0,s.jsx)(n.code,{children:"Task"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The last thing we want to do is display the tasks we just fetched."}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["In our ",(0,s.jsx)(n.code,{children:"App.tsx"})," file, update our UI with the following code:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'{\n  !accountHasList ? (\n    <Row gutter={[0, 32]} style={{ marginTop: "2rem" }}>\n      <Col span={8} offset={8}>\n        <Button\n          disabled={!account}\n          block\n          onClick={addNewList}\n          type="primary"\n          style={{ height: "40px", backgroundColor: "#3f67ff" }}\n        >\n          Add new list\n        </Button>\n      </Col>\n    </Row>\n  ) : (\n    <Row gutter={[0, 32]} style={{ marginTop: "2rem" }}>\n      <Col span={8} offset={8}>\n        {tasks && (\n          <List\n            size="small"\n            bordered\n            dataSource={tasks}\n            renderItem={(task: any) => (\n              <List.Item actions={[<Checkbox />]}>\n                <List.Item.Meta\n                  title={task.content}\n                  description={\n                    <a\n                      href={`https://explorer.aptoslabs.com/account/${task.address}/`}\n                      target="_blank"\n                    >{`${task.address.slice(0, 6)}...${task.address.slice(-5)}`}</a>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        )}\n      </Col>\n    </Row>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["That will display the ",(0,s.jsx)(n.strong,{children:"Add new list"})," button if account doesn\u2019t have a list or instead the tasks if the account has a list."]}),"\n",(0,s.jsx)(n.p,{children:"Go ahead and refresh your browser - see the magic!"}),"\n",(0,s.jsx)(n.p,{children:"We haven\u2019t added any tasks yet, so we simply see a box of empty data. Let\u2019s add some tasks!"}),"\n",(0,s.jsx)(n.h2,{id:"add-task",children:"Add task"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Update our UI with an ",(0,s.jsx)(n.em,{children:"add task"})," input:"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Import ",(0,s.jsx)(n.code,{children:"Input"})," from ",(0,s.jsx)(n.code,{children:"antd"})," - ",(0,s.jsx)(n.code,{children:'import { Input } from "antd";'})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'{!accountHasList ? (\n  ...\n) : (\n  <Row gutter={[0, 32]} style={{ marginTop: "2rem" }}>\n\t\t// Add this!\n    <Col span={8} offset={8}>\n      <Input.Group compact>\n        <Input\n          style={{ width: "calc(100% - 60px)" }}\n          placeholder="Add a Task"\n          size="large"\n        />\n        <Button\n          type="primary"\n          style={{ height: "40px", backgroundColor: "#3f67ff" }}\n        >\n          Add\n        </Button>\n      </Input.Group>\n    </Col>\n    ...\n  </Row>\n)}\n'})}),"\n",(0,s.jsx)(n.p,{children:"We have added a text input to write the task and a button to add the task."}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Create a new local state that holds the task content:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function App() {\n  ...\n  const [newTask, setNewTask] = useState<string>("");\n  ...\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Add an ",(0,s.jsx)(n.code,{children:"onWriteTask"})," function that will get called whenever a user types something in the input text:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function App() {\n  ...\n  const [newTask, setNewTask] = useState<string>("");\n\n  const onWriteTask = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setNewTask(value);\n  };\n  ...\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["Find our ",(0,s.jsx)(n.code,{children:"<Input/>"})," component, add the ",(0,s.jsx)(n.code,{children:"onChange"})," event to it, pass it our ",(0,s.jsx)(n.code,{children:"onWriteTask"})," function and set the input value to be the ",(0,s.jsx)(n.code,{children:"newTask"})," local state:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Input\n  onChange={(event) => onWriteTask(event)} // add this\n  style={{ width: "calc(100% - 60px)" }}\n  placeholder="Add a Task"\n  size="large"\n  value={newTask} // add this\n/>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Cool! Now we have a working flow that when the user types something on the Input component, a function will get fired and set our local state with that content."}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["Let\u2019s also add a function that submits the typed task to chain! Find our Add ",(0,s.jsx)(n.code,{children:"<Button />"})," component and update it with the following"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<Button\n  onClick={onTaskAdded} // add this\n  type="primary"\n  style={{ height: "40px", backgroundColor: "#3f67ff" }}\n>\n  Add\n</Button>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["That adds an ",(0,s.jsx)(n.code,{children:"onClickevent"})," that triggers an ",(0,s.jsx)(n.code,{children:"onTaskAdded"})," function."]}),"\n",(0,s.jsx)(n.p,{children:"When someones adds a new task we:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"want to verify they are connected with a wallet."}),"\n",(0,s.jsx)(n.li,{children:"build a transaction payload that would be submitted to chain."}),"\n",(0,s.jsx)(n.li,{children:"submit it to chain using our wallet."}),"\n",(0,s.jsx)(n.li,{children:"wait for the transaction."}),"\n",(0,s.jsx)(n.li,{children:"update our UI with that new task (without the need to refresh the page)."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsxs)(n.li,{children:["Add an ",(0,s.jsx)(n.code,{children:"onTaskAdded"})," function with:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'  const onTaskAdded = async () => {\n    // check for connected account\n    if (!account) return;\n    setTransactionInProgress(true);\n    const transaction:InputTransactionData = {\n      data:{\n        function:`${moduleAddress}::todolist::create_task`,\n        functionArguments:[newTask]\n      }\n    }\n\n    // hold the latest task.task_id from our local state\n    const latestId = tasks.length > 0 ? parseInt(tasks[tasks.length - 1].task_id) + 1 : 1;\n\n    // build a newTaskToPush object into our local state\n    const newTaskToPush = {\n      address: account.address,\n      completed: false,\n      content: newTask,\n      task_id: latestId + "",\n    };\n\n    try {\n      // sign and submit transaction to chain\n      const response = await signAndSubmitTransaction(transaction);\n      // wait for transaction\n      await aptos.waitForTransaction({transactionHash:response.hash});\n\n      // Create a new array based on current state:\n      let newTasks = [...tasks];\n\n      // Add item to the tasks array\n      newTasks.push(newTaskToPush);\n      // Set state\n      setTasks(newTasks);\n      // clear input text\n      setNewTask("");\n    } catch (error: any) {\n      console.log("error", error);\n    } finally {\n      setTransactionInProgress(false);\n    }\n  };\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Let\u2019s go over on what is happening."})}),"\n",(0,s.jsxs)(n.p,{children:["First, note we use the ",(0,s.jsx)(n.code,{children:"account"})," property from our wallet provider to make sure there is an account connected to our app."]}),"\n",(0,s.jsx)(n.p,{children:"Then we build our transaction data to be submitted to chain:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const transaction:InputTransactionData = {\n      data:{\n        function:`${moduleAddress}::todolist::create_task`,\n        functionArguments:[newTask]\n      }\n    }\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"function"}),"- is built from the module address, module name and the function name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"functionArguments"})," - the arguments the function expects, in our case the task content."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Then, within our try/catch block, we use a wallet provider function to submit the transaction to chain and an SDK function to wait for that transaction.\nIf all goes well, we want to find the current latest task ID so we can add it to our current tasks state array. We will also create a new task to push to the current tasks state array (so we can display the new task in our tasks list on the UI without the need to refresh the page)."}),"\n",(0,s.jsx)(n.p,{children:"TRY IT!"}),"\n",(0,s.jsxs)(n.p,{children:["Type a new task in the text input, click ",(0,s.jsx)(n.strong,{children:"Add"}),", approve the transaction and see it being added to the tasks list."]}),"\n",(0,s.jsx)(n.h2,{id:"mark-task-as-completed",children:"Mark task as completed"}),"\n",(0,s.jsxs)(n.p,{children:["Next, we can implement the ",(0,s.jsx)(n.code,{children:"complete_task"})," function. We have the checkbox in our UI so users can mark a task as completed."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Update the ",(0,s.jsx)(n.code,{children:"<Checkbox/>"})," component with an ",(0,s.jsx)(n.code,{children:"onCheck"})," property that would call an ",(0,s.jsx)(n.code,{children:"onCheckboxChange"})," function once it is checked:"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Import ",(0,s.jsx)(n.code,{children:"List"})," from ",(0,s.jsx)(n.code,{children:"antd"})," - ",(0,s.jsx)(n.code,{children:'import { List } from "antd";'})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<List.Item actions={[\n  <Checkbox onChange={(event) => onCheckboxChange(event, task.task_id)}/>\n]}>\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["Create the ",(0,s.jsx)(n.code,{children:"onCheckboxChange"})," function (make sure to import ",(0,s.jsx)(n.code,{children:"CheckboxChangeEvent"})," from ",(0,s.jsx)(n.code,{children:"antd"})," - ",(0,s.jsx)(n.code,{children:'import { CheckboxChangeEvent } from "antd/es/checkbox";'}),"):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const onCheckboxChange = async (\n    event: CheckboxChangeEvent,\n    taskId: string\n  ) => {\n    if (!account) return;\n    if (!event.target.checked) return;\n    setTransactionInProgress(true);\n    const transaction:InputTransactionData = {\n      data:{\n        function:`${moduleAddress}::todolist::complete_task`,\n        functionArguments:[taskId]\n      }\n    }\n\n    try {\n      // sign and submit transaction to chain\n      const response = await signAndSubmitTransaction(transaction);\n      // wait for transaction\n      await aptos.waitForTransaction({transactionHash:response.hash});\n\n      setTasks((prevState) => {\n        const newState = prevState.map((obj) => {\n          // if task_id equals the checked taskId, update completed property\n          if (obj.task_id === taskId) {\n            return { ...obj, completed: true };\n          }\n\n          // otherwise return object as is\n          return obj;\n        });\n\n        return newState;\n      });\n    } catch (error: any) {\n      console.log("error", error);\n    } finally {\n      setTransactionInProgress(false);\n    }\n  };\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here we basically do the same thing we did when we created a new list or a new task."}),"\n",(0,s.jsx)(n.p,{children:"We make sure there is an account connected, set the transaction in progress state, build the transaction payload, submit the transaction, wait for it and update the task on the UI as completed."}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Update the ",(0,s.jsx)(n.code,{children:"Checkbox"})," component to be checked by default if a task has already marked as completed:"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Import ",(0,s.jsx)(n.code,{children:"Checkbox"})," from ",(0,s.jsx)(n.code,{children:"antd"})," - ",(0,s.jsx)(n.code,{children:'import { Checkbox } from "antd";'})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"...\n<List.Item\n  actions={[\n    <div>\n      {task.completed ? (\n        <Checkbox defaultChecked={true} disabled />\n      ) : (\n        <Checkbox\n          onChange={(event) =>\n            onCheckboxChange(event, task.task_id)\n          }\n        />\n      )}\n    </div>,\n  ]}\n>\n...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Try it! Check a task\u2019s checkbox, approve the transaction and see the task marked as completed."}),"\n",(0,s.jsx)(n.p,{children:"You have now learned how to build a dapp on Aptos from end to end. Congratulations! Tell your friends. :-)"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},83581:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var s=t(11855);const a={},o=s.createContext(a);function d(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);