"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[1364],{97359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var s=n(63159),o=n(83581),i=n(45496),r=n(57376);const a={title:"Aptos Blockchain Deep Dive"},c=void 0,l={id:"concepts/blockchain",title:"Aptos Blockchain Deep Dive",description:"For a deeper understanding of the lifecycle of an Aptos transaction (from an operational perspective), we will follow a transaction on its journey, from being submitted to an Aptos fullnode, to being committed to the Aptos blockchain. We will then focus on the logical components of Aptos nodes and take a look at how the transaction interacts with these components.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/concepts/blockchain.md",sourceDirName:"concepts",slug:"/concepts/blockchain",permalink:"/concepts/blockchain",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/concepts/blockchain.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Aptos Blockchain Deep Dive"},sidebar:"aptosSidebar",previous:{title:"Learn about Aptos",permalink:"/concepts/"},next:{title:"Validator Nodes Overview",permalink:"/concepts/validator-nodes"}},h={},d=[{value:"Life of a Transaction",id:"life-of-a-transaction",level:2},{value:"The Journey",id:"the-journey",level:3},{value:"Client submits a transaction",id:"client-submits-a-transaction",level:3},{value:"Accepting the transaction",id:"accepting-the-transaction",level:3},{value:"Sharing the transaction with other validator nodes",id:"sharing-the-transaction-with-other-validator-nodes",level:3},{value:"Proposing the block",id:"proposing-the-block",level:3},{value:"Executing the block and reaching consensus",id:"executing-the-block-and-reaching-consensus",level:3},{value:"Committing the block",id:"committing-the-block",level:3},{value:"Aptos node component interactions",id:"aptos-node-component-interactions",level:2},{value:"REST Service",id:"rest-service",level:2},{value:"1. Client \u2192 REST Service",id:"1-client--rest-service",level:3},{value:"2. REST Service \u2192 Mempool",id:"2-rest-service--mempool",level:3},{value:"3. Mempool -&gt; Mempool",id:"3-mempool---mempool",level:3},{value:"4. REST Service \u2192 Storage",id:"4-rest-service--storage",level:3},{value:"Virtual Machine (VM)",id:"virtual-machine-vm",level:2},{value:"1. Virtual Machine \u2192 Storage",id:"1-virtual-machine--storage",level:3},{value:"2. Execution \u2192 Virtual Machine",id:"2-execution--virtual-machine",level:3},{value:"3. Mempool \u2192 Virtual Machine",id:"3-mempool--virtual-machine",level:3},{value:"Mempool",id:"mempool",level:2},{value:"1. REST Service \u2192 Mempool",id:"1-rest-service--mempool",level:3},{value:"2. Mempool \u2192 Other validator nodes",id:"2-mempool--other-validator-nodes",level:3},{value:"3. Consensus \u2192 Mempool",id:"3-consensus--mempool",level:3},{value:"4. Mempool \u2192 VM",id:"4-mempool--vm",level:3},{value:"Consensus",id:"consensus",level:2},{value:"1. Consensus \u2192 Mempool",id:"1-consensus--mempool",level:3},{value:"2. Consensus \u2192 Other Validators",id:"2-consensus--other-validators",level:3},{value:"3. Consensus \u2192 Execution, Consensus \u2192 Other Validators",id:"3-consensus--execution-consensus--other-validators",level:3},{value:"4. Consensus \u2192 Execution",id:"4-consensus--execution",level:3},{value:"Execution",id:"execution",level:2},{value:"1. Consensus \u2192 Execution",id:"1-consensus--execution",level:3},{value:"2. Execution \u2192 VM",id:"2-execution--vm",level:3},{value:"3. Consensus \u2192 Execution",id:"3-consensus--execution",level:3},{value:"4. Execution \u2192 Storage",id:"4-execution--storage",level:3},{value:"Storage",id:"storage",level:2},{value:"1. VM \u2192 Storage",id:"1-vm--storage",level:3},{value:"2. Execution \u2192 Storage",id:"2-execution--storage",level:3},{value:"3. Execution \u2192 Storage",id:"3-execution--storage",level:3},{value:"4. REST Service \u2192 Storage",id:"4-rest-service--storage-1",level:3}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"For a deeper understanding of the lifecycle of an Aptos transaction (from an operational perspective), we will follow a transaction on its journey, from being submitted to an Aptos fullnode, to being committed to the Aptos blockchain. We will then focus on the logical components of Aptos nodes and take a look at how the transaction interacts with these components."}),"\n",(0,s.jsx)(t.h2,{id:"life-of-a-transaction",children:"Life of a Transaction"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Alice and Bob are two users who each have an ",(0,s.jsx)(t.a,{href:"/reference/glossary#account",children:"account"})," on the Aptos blockchain."]}),"\n",(0,s.jsx)(t.li,{children:"Alice's account has 110 Aptos Coins."}),"\n",(0,s.jsx)(t.li,{children:"Alice is sending 10 Aptos Coins to Bob."}),"\n",(0,s.jsxs)(t.li,{children:["The current ",(0,s.jsx)(t.a,{href:"/reference/glossary#sequence-number",children:"sequence number"})," of Alice's account is 5 (which indicates that 5 transactions have already been sent from Alice's account)."]}),"\n",(0,s.jsxs)(t.li,{children:["There are a total of 100 validator nodes \u2014 V",(0,s.jsx)("sub",{children:"1"})," to V",(0,s.jsx)("sub",{children:"100"})," on the network."]}),"\n",(0,s.jsxs)(t.li,{children:["An Aptos client submits Alice's transaction to a REST service on an Aptos Fullnode. The fullnode forwards this transaction to a validator fullnode which in turn forwards it to validator V",(0,s.jsx)("sub",{children:"1"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Validator V",(0,s.jsx)("sub",{children:"1"})," is a proposer/leader for the current round."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"the-journey",children:"The Journey"}),"\n",(0,s.jsxs)(t.p,{children:["In this section, we will describe the lifecycle of transaction T",(0,s.jsx)("sub",{children:"5"}),", from when the client submits it to when it is committed to the Aptos blockchain."]}),"\n",(0,s.jsx)(t.p,{children:"For the relevant steps, we've included a link to the corresponding inter-component interactions of the validator node. After you are familiar with all the steps in the lifecycle of the transaction, you may want to refer to the information on the corresponding inter-component interactions for each step."}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/1-life-of-txn.svg"),dark:(0,r.A)("/img/docs/1-life-of-txn-dark.svg")}})}),"\n",(0,s.jsx)(t.admonition,{title:"Alert",type:"tip",children:(0,s.jsx)(t.p,{children:"The arrows in all the visuals in this article originate on the component initiating an interaction/action and terminate on the component on which the action is being performed. The arrows do not represent data read, written, or returned."})}),"\n",(0,s.jsx)(t.p,{children:"The lifecycle of a transaction has five stages:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Accepting"}),": ",(0,s.jsx)(t.a,{href:"#accepting-the-transaction",children:"Accepting the transaction"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Sharing"}),": ",(0,s.jsx)(t.a,{href:"#sharing-the-transaction-with-other-validator-nodes",children:"Sharing the transaction with other validator nodes"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Proposing"}),": ",(0,s.jsx)(t.a,{href:"#proposing-the-block",children:"Proposing the block"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Executing and Consensus"}),": ",(0,s.jsx)(t.a,{href:"#executing-the-block-and-reaching-consensus",children:"Executing the block and reaching consensus"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Committing"}),": ",(0,s.jsx)(t.a,{href:"#committing-the-block",children:"Committing the block"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"We've described what happens in each stage below, along with links to the corresponding Aptos node component interactions."}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"Transactions are validated upon entering a mempool and prior to execution by consensus. The client only learns of validation results returned during the initial submission via the REST service. Transactions may silently fail to execute, especially in the case where the account has run out of utility token or changed its authentication key in the midst of many transactions. While this happens infrequently, there are ongoing efforts to improve the visibility in this space."})}),"\n",(0,s.jsx)(t.h3,{id:"client-submits-a-transaction",children:"Client submits a transaction"}),"\n",(0,s.jsxs)(t.p,{children:["An Aptos ",(0,s.jsx)(t.strong,{children:"client constructs a raw transaction"})," (let's call it Traw",(0,s.jsx)("sub",{children:"5"}),") to transfer 10 Aptos Coins from Alice\u2019s account to Bob\u2019s account. The Aptos client signs the transaction with Alice's private key. The signed transaction T",(0,s.jsx)("sub",{children:"5"})," includes the following:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The raw transaction."}),"\n",(0,s.jsx)(t.li,{children:"Alice's public key."}),"\n",(0,s.jsx)(t.li,{children:"Alice's signature."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The raw transaction includes the following fields:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Fields"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/reference/glossary#account-address",children:"Account address"})}),(0,s.jsx)(t.td,{children:"Alice's account address"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Payload"}),(0,s.jsxs)(t.td,{children:["Indicates an action or set of actions Alice's behalf. In the case this is a Move function, it directly calls into Move bytecode on the chain. Alternatively, it may be Move bytecode peer-to-peer ",(0,s.jsx)(t.a,{href:"/reference/glossary#transaction-or-move-script",children:"move script"}),". It also contains a list of inputs to the function or script. For this example, it is a function call to transfer an amount of Aptos Coins from Alice account to Bob's account, where Alice's account is implied by sending the transaction and Bob's account and the amount are specified as transaction inputs."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/reference/glossary#gas-unit-price",children:"Gas unit price"})}),(0,s.jsxs)(t.td,{children:["The amount the sender is willing to pay per unit of gas, to execute the transaction. This is represented as Octa or units of 10",(0,s.jsx)("sup",{children:"-8"})," Aptos utility tokens."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/reference/glossary#maximum-gas-amount",children:"Maximum gas amount"})}),(0,s.jsxs)(t.td,{children:["The maximum gas amount in Aptos utility tokens Alice is willing to pay for this transaction. Gas charges are equal to the base gas cost covered by computation and IO multiplied by the gas price. Gas costs also include storage with an Apt-fixed priced storage model. This is represents as Octa or units of 10",(0,s.jsx)("sup",{children:"-8"})," Aptos utility tokens."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/reference/glossary#expiration-time",children:"Expiration time"})}),(0,s.jsx)(t.td,{children:"Expiration time of the transaction."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/reference/glossary#sequence-number",children:"Sequence number"})}),(0,s.jsxs)(t.td,{children:["The sequence number (5, in this example) for an account indicates the number of transactions that have been submitted and committed on-chain from that account. In this case, 5 transactions have been submitted from Alice\u2019s account, including Traw",(0,s.jsx)("sub",{children:"5"}),". Note: a transaction with sequence number 5 can only be committed on-chain if the account sequence number is 5."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"https://github.com/aptos-labs/aptos-core/blob/main/types/src/chain_id.rs",children:"Chain ID"})}),(0,s.jsx)(t.td,{children:"An identifier that distinguishes the Aptos networks (to prevent cross-network attacks)."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"accepting-the-transaction",children:"Accepting the transaction"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Aptos Node Component Interactions"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["1. ",(0,s.jsx)(t.strong,{children:"Client \u2192 REST service"}),": The client submits transaction T",(0,s.jsx)("sub",{children:"5"})," to the REST service of an Aptos fullnode. The fullnode uses the REST service to forward the transaction to its own mempool, which then forwards the transaction to mempools running on other nodes in the network. The transaction will eventually be forwarded to a mempool running on a validator fullnode, which will send it to a validator node (V",(0,s.jsx)("sub",{children:"1"})," in this case)."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#1-client--rest-service",children:"1. REST Service"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["2. ",(0,s.jsx)(t.strong,{children:"REST service \u2192 Mempool"}),": The fullnode's mempool transmits transaction T",(0,s.jsx)("sub",{children:"5"})," to validator V",(0,s.jsx)("sub",{children:"1"}),"'s mempool."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#2-rest-service--mempool",children:"2. REST Service"}),", ",(0,s.jsx)(t.a,{href:"#1-rest-service--mempool",children:"1. Mempool"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["3. ",(0,s.jsx)(t.strong,{children:"Mempool \u2192 Virtual Machine (VM)"}),": Mempool will use the virtual machine (VM) component to perform transaction validation, such as signature verification, account balance verification and replay resistance using the sequence number."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#4-mempool--vm",children:"4. Mempool"}),", ",(0,s.jsx)(t.a,{href:"#3-mempool--virtual-machine",children:"3. Virtual Machine"})]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"sharing-the-transaction-with-other-validator-nodes",children:"Sharing the transaction with other validator nodes"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Aptos Node Component Interactions"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["4. ",(0,s.jsx)(t.strong,{children:"Mempool"}),": The mempool will hold T",(0,s.jsx)("sub",{children:"5"})," in an in-memory buffer. Mempool may already contain multiple transactions sent from Alice's address."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#mempool",children:"Mempool"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["5. ",(0,s.jsx)(t.strong,{children:"Mempool \u2192 Other Validators"}),": Using the shared-mempool protocol, V",(0,s.jsx)("sub",{children:"1"})," will share the transactions (including T",(0,s.jsx)("sub",{children:"5"}),") in its mempool with other validator nodes and place transactions received from them into its own (V",(0,s.jsx)("sub",{children:"1"}),") mempool."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#2-mempool--other-validator-nodes",children:"2. Mempool"})})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"proposing-the-block",children:"Proposing the block"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Aptos Node Component Interactions"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["6. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Mempool"}),": \u2014 As validator V",(0,s.jsx)("sub",{children:"1"})," is a proposer/leader for this transaction, it will pull a block of transactions from its mempool and replicate this block as a proposal to other validator nodes via its consensus component."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#1-consensus--mempool",children:"1. Consensus"}),", ",(0,s.jsx)(t.a,{href:"#3-consensus--mempool",children:"3. Mempool"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["7. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Other Validators"}),": The consensus component of V",(0,s.jsx)("sub",{children:"1"})," is responsible for coordinating agreement among all validators on the order of transactions in the proposed block."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#2-consensus--other-validators",children:"2. Consensus"})})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"executing-the-block-and-reaching-consensus",children:"Executing the block and reaching consensus"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Aptos Node Component Interactions"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["8. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Execution"}),": As part of reaching agreement, the block of transactions (containing T",(0,s.jsx)("sub",{children:"5"}),") is shared with the execution component."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#3-consensus--execution-consensus--other-validators",children:"3. Consensus"}),", ",(0,s.jsx)(t.a,{href:"#1-consensus--execution",children:"1. Execution"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["9. ",(0,s.jsx)(t.strong,{children:"Execution \u2192 Virtual Machine"}),": The execution component manages the execution of transactions in the VM. Note that this execution happens speculatively before the transactions in the block have been agreed upon."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#2-execution--vm",children:"2. Execution"}),", ",(0,s.jsx)(t.a,{href:"#3-mempool--virtual-machine",children:"3. Virtual Machine"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["10. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Execution"}),": After executing the transactions in the block, the execution component appends the transactions in the block (including T",(0,s.jsx)("sub",{children:"5"}),") to the ",(0,s.jsx)(t.a,{href:"/reference/glossary#merkle-accumulator",children:"Merkle accumulator"}),' (of the ledger history). This is an in-memory/temporary version of the Merkle accumulator. The necessary part of the proposed/speculative result of executing these transactions is returned to the consensus component to agree on. The arrow from "consensus" to "execution" indicates that the request to execute transactions was made by the consensus component.']}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#3-consensus--execution-consensus--other-validators",children:"3. Consensus"}),", ",(0,s.jsx)(t.a,{href:"#1-consensus--execution",children:"1. Execution"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["11. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Other Validators"}),": V",(0,s.jsx)("sub",{children:"1"})," (the consensus leader) attempts to reach consensus on the proposed block's execution result with the other validator nodes participating in consensus."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#3-consensus--execution-consensus--other-validators",children:"3. Consensus"})})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"committing-the-block",children:"Committing the block"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Aptos Node Component Interactions"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["12. ",(0,s.jsx)(t.strong,{children:"Consensus \u2192 Execution"}),", ",(0,s.jsx)(t.strong,{children:"Execution \u2192 Storage"}),": If the proposed block's execution result is agreed upon and signed by a set of validators that have the quorum of votes, validator V",(0,s.jsx)("sub",{children:"1"}),"'s execution component reads the full result of the proposed block execution from the speculative execution cache and commits all the transactions in the proposed block to persistent storage with their results."]}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"#4-consensus--execution",children:"4. Consensus"}),", ",(0,s.jsx)(t.a,{href:"#3-consensus--execution",children:"3. Execution"}),", ",(0,s.jsx)(t.a,{href:"#4-execution--storage",children:"4. Execution"}),", ",(0,s.jsx)(t.a,{href:"#3-execution--storage",children:"3. Storage"})]})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["Alice's account will now have 100 Aptos Coins, and its sequence number will be 6. If T",(0,s.jsx)("sub",{children:"5"})," is replayed by Bob, it will be rejected as the sequence number of Alice's account (6) is greater than the sequence number of the replayed transaction (5)."]}),"\n",(0,s.jsx)(t.h2,{id:"aptos-node-component-interactions",children:"Aptos node component interactions"}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.a,{href:"#life-of-a-transaction",children:"Life of a Transaction"})," section, we described the typical lifecycle of a transaction (from transaction submission to transaction commit). Now let's look at the inter-component interactions of Aptos nodes as the blockchain processes transactions and responds to queries. This information will be most useful to those who:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Would like to get an idea of how the system works under the covers."}),"\n",(0,s.jsx)(t.li,{children:"Are interested in eventually contributing to the Aptos blockchain."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"You can learn more about the different types of Aptos nodes here:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/concepts/validator-nodes",children:"Validator nodes"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/concepts/fullnodes",children:"Fullnodes"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["For our narrative, we will assume that a client submits a transaction T",(0,s.jsx)("sub",{children:"N"})," to a validator V",(0,s.jsx)("sub",{children:"X"}),". For each validator component, we will describe each of its inter-component interactions in subsections under the respective component's section. Note that subsections describing the inter-component interactions are not listed strictly in the order in which they are performed. Most of the interactions are relevant to the processing of a transaction, and some are relevant to clients querying the blockchain (queries for existing information on the blockchain)."]}),"\n",(0,s.jsx)(t.p,{children:"The following are the core components of an Aptos node used in the lifecycle of a transaction:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Fullnode"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#rest-service",children:"REST Service"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Validator node"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#mempool",children:"Mempool"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#consensus",children:"Consensus"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#execution",children:"Execution"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#virtual-machine-vm",children:"Virtual Machine"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#storage",children:"Storage"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"rest-service",children:"REST Service"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/7-life-of-txn.svg"),dark:(0,r.A)("/img/docs/7-life-of-txn-dark.svg")}})}),"\n",(0,s.jsxs)(t.p,{children:["Any request made by a client goes to the REST Service of a fullnode first. Then, the submitted transaction is forwarded to the validator fullnode, which then sends it to the validator node V",(0,s.jsx)("sub",{children:"X"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"1-client--rest-service",children:"1. Client \u2192 REST Service"}),"\n",(0,s.jsx)(t.p,{children:"A client submits a transaction to the REST service of an Aptos fullnode."}),"\n",(0,s.jsx)(t.h3,{id:"2-rest-service--mempool",children:"2. REST Service \u2192 Mempool"}),"\n",(0,s.jsxs)(t.p,{children:["The REST service of the fullnode transfers the transaction to its mempool. After mempool does some initial checks, the REST Service will return a status to the client indicating whether the transaction was accepted or rejected. For example, out-of-date transactions will be rejected: mempool will accept the transaction T",(0,s.jsx)("sub",{children:"N"})," only if the sequence number of T",(0,s.jsx)("sub",{children:"N"})," is greater than or equal to the current sequence number of the sender's account."]}),"\n",(0,s.jsx)(t.h3,{id:"3-mempool---mempool",children:"3. Mempool -> Mempool"}),"\n",(0,s.jsxs)(t.p,{children:["The mempool on the fullnode sends the transaction to the mempool of a validator fullnode, which then sends the transaction to validator node V",(0,s.jsx)("sub",{children:"X"}),"'s mempool. Note that the transaction will not be sent to the next mempool (or passed to consensus) until the sequence number matches the sequence number of the sender\u2019s account. Furthermore, each mempool performs the same initial checks upon receiving a transaction, this may result in a transaction being discarded on its way to consensus. The current implementation of mempool does not provide any feedback if a transaction is discarded during this process."]}),"\n",(0,s.jsx)(t.h3,{id:"4-rest-service--storage",children:"4. REST Service \u2192 Storage"}),"\n",(0,s.jsx)(t.p,{children:"When a client performs a read query on the Aptos blockchain (for example, to get the balance of Alice's account), the REST service interacts with the storage component directly to obtain the requested information."}),"\n",(0,s.jsx)(t.h2,{id:"virtual-machine-vm",children:"Virtual Machine (VM)"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/2-life-of-txn.svg"),dark:(0,r.A)("/img/docs/2-life-of-txn-dark.svg")}})}),"\n",(0,s.jsx)(t.p,{children:"The Move VM verifies and executes Move scripts written in Move bytecode."}),"\n",(0,s.jsx)(t.h3,{id:"1-virtual-machine--storage",children:"1. Virtual Machine \u2192 Storage"}),"\n",(0,s.jsxs)(t.p,{children:["When mempool requests the VM to validate a transaction via ",(0,s.jsx)(t.code,{children:"VMValidator::validate_transaction()"}),", the VM loads the transaction sender's account from storage and performs verifications, some of which have been described in the list below."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Checks that the input signature on the signed transaction is correct (to reject incorrectly signed transactions)."}),"\n",(0,s.jsx)(t.li,{children:"Checks that the sender's account authentication key is the same as the hash of the public key (corresponding to the private key used to sign the transaction)."}),"\n",(0,s.jsx)(t.li,{children:"Verifies that the sequence number for the transaction is greater than or equal to the current sequence number for the sender's account. Completing this check prevents the replay of the same transaction against the sender's account."}),"\n",(0,s.jsx)(t.li,{children:"Verifies that the program in the signed transaction is not malformed, as a malformed program cannot be executed by the VM."}),"\n",(0,s.jsx)(t.li,{children:"Verifies that the sender's account balance contains at least the maximum gas amount multiplied by the gas price specified in the transaction, which ensures that the transaction can pay for the resources it uses."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"2-execution--virtual-machine",children:"2. Execution \u2192 Virtual Machine"}),"\n",(0,s.jsxs)(t.p,{children:["The execution component utilizes the VM to execute a transaction via ",(0,s.jsx)(t.code,{children:"ExecutorTask::execute_transaction()"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It is important to understand that executing a transaction is different from updating the state of the ledger and persisting the results in storage. A transaction T",(0,s.jsx)("sub",{children:"N"})," is first executed as part of an attempt to reach agreement on blocks during consensus. If agreement is reached with the other validators on the ordering of transactions and their execution results, the results are persisted in storage and the state of the ledger is updated."]}),"\n",(0,s.jsx)(t.h3,{id:"3-mempool--virtual-machine",children:"3. Mempool \u2192 Virtual Machine"}),"\n",(0,s.jsxs)(t.p,{children:["When mempool receives a transaction from other validators via shared mempool or from the REST service, mempool invokes ",(0,s.jsx)(t.code,{children:"VMValidator::validate_transaction()"})," on the VM to validate the transaction."]}),"\n",(0,s.jsxs)(t.p,{children:["For implementation details refer to the ",(0,s.jsx)(t.a,{href:"https://github.com/move-language/move/tree/main/language/move-vm",children:"Move Virtual Machine README"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"mempool",children:"Mempool"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/3-life-of-txn.svg"),dark:(0,r.A)("/img/docs/3-life-of-txn-dark.svg")}})}),"\n",(0,s.jsx)(t.p,{children:"Mempool is a shared buffer that holds the transactions that are \u201cwaiting\u201d to be executed. When a new transaction is added to the mempool, the mempool shares this transaction with other validator nodes in the system. To reduce network consumption in the \u201cshared mempool,\u201d each validator is responsible for delivering its own transactions to other validators. When a validator receives a transaction from the mempool of another validator, the transaction is added to the mempool of the recipient validator."}),"\n",(0,s.jsx)(t.h3,{id:"1-rest-service--mempool",children:"1. REST Service \u2192 Mempool"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"After receiving a transaction from the client, the REST service sends the transaction to its own mempool, which then shares the transaction with the mempool of a validator fullnode. The mempool on the validator fullnode then shares the transaction with the mempool of a validator."}),"\n",(0,s.jsxs)(t.li,{children:["The mempool for validator node V",(0,s.jsx)("sub",{children:"X"})," accepts transaction T",(0,s.jsx)("sub",{children:"N"})," for the sender's account only if the sequence number of T",(0,s.jsx)("sub",{children:"N"})," is greater than or equal to the current sequence number of the sender's account."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"2-mempool--other-validator-nodes",children:"2. Mempool \u2192 Other validator nodes"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The mempool of validator node V",(0,s.jsx)("sub",{children:"X"})," shares transaction T",(0,s.jsx)("sub",{children:"N"})," with the other validators on the same network."]}),"\n",(0,s.jsxs)(t.li,{children:["Other validators share the transactions in their respective mempools with V",(0,s.jsx)("sub",{children:"X"}),"\u2019s mempool."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"3-consensus--mempool",children:"3. Consensus \u2192 Mempool"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"When the transaction is forwarded to a validator node and once the validator node becomes the leader, its consensus component will pull a block of transactions from its mempool and replicate the proposed block to other validators. It does this to arrive at a consensus on the ordering of transactions and the execution results of the transactions in the proposed block."}),"\n",(0,s.jsxs)(t.li,{children:["Note that just because a transaction T",(0,s.jsx)("sub",{children:"N"})," was included in a proposed consensus block, it does not guarantee that T",(0,s.jsx)("sub",{children:"N "}),"will eventually be persisted in the distributed database of the Aptos blockchain."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"4-mempool--vm",children:"4. Mempool \u2192 VM"}),"\n",(0,s.jsxs)(t.p,{children:["When mempool receives a transaction from other validators, mempool invokes ",(0,s.jsx)("code",{children:"VMValidator::validate_transaction()"})," on the VM to validate the transaction."]}),"\n",(0,s.jsx)(t.h2,{id:"consensus",children:"Consensus"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/4-life-of-txn.svg"),dark:(0,r.A)("/img/docs/4-life-of-txn-dark.svg")}})}),"\n",(0,s.jsxs)(t.p,{children:["The consensus component is responsible for ordering blocks of transactions and agreeing on the results of execution by participating in the ",(0,s.jsx)(t.a,{href:"/reference/glossary#consensus-protocol",children:"consensus protocol"})," with other validators in the network."]}),"\n",(0,s.jsx)(t.h3,{id:"1-consensus--mempool",children:"1. Consensus \u2192 Mempool"}),"\n",(0,s.jsxs)(t.p,{children:["When validator V",(0,s.jsx)("sub",{children:"X"})," is a leader/proposer, the consensus component of V",(0,s.jsx)("sub",{children:"X"})," pulls a block of transactions from its mempool via: ",(0,s.jsx)(t.code,{children:"Mempool::get_batch()"}),", and forms a proposed block of transactions."]}),"\n",(0,s.jsx)(t.h3,{id:"2-consensus--other-validators",children:"2. Consensus \u2192 Other Validators"}),"\n",(0,s.jsxs)(t.p,{children:["If V",(0,s.jsx)("sub",{children:"X"})," is a proposer/leader, its consensus component replicates the proposed block of transactions to other validators."]}),"\n",(0,s.jsx)(t.h3,{id:"3-consensus--execution-consensus--other-validators",children:"3. Consensus \u2192 Execution, Consensus \u2192 Other Validators"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["To execute a block of transactions, consensus interacts with the execution component. Consensus executes a block of transactions via ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::execute_block()"})," (Refer to ",(0,s.jsx)(t.a,{href:"#1-consensus--execution",children:"Consensus \u2192 execution"}),")"]}),"\n",(0,s.jsx)(t.li,{children:"After executing the transactions in the proposed block, the execution component responds to the consensus component with the result of executing these transactions."}),"\n",(0,s.jsx)(t.li,{children:"The consensus component signs the execution result and attempts to reach agreement on this result with other validators."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"4-consensus--execution",children:"4. Consensus \u2192 Execution"}),"\n",(0,s.jsxs)(t.p,{children:["If enough validators vote for the same execution result, the consensus component of V",(0,s.jsx)("sub",{children:"X"})," informs execution via ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::commit_blocks()"})," that this block is ready to be committed."]}),"\n",(0,s.jsx)(t.h2,{id:"execution",children:"Execution"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/5-life-of-txn.svg"),dark:(0,r.A)("/img/docs/5-life-of-txn-dark.svg")}})}),"\n",(0,s.jsx)(t.p,{children:"The execution component coordinates the execution of a block of transactions and maintains a transient state that can be voted upon by consensus. If these transactions are successful, they are committed to storage."}),"\n",(0,s.jsx)(t.h3,{id:"1-consensus--execution",children:"1. Consensus \u2192 Execution"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Consensus requests execution to execute a block of transactions via: ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::execute_block()"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Execution maintains a \u201cscratchpad,\u201d which holds in-memory copies of the relevant portions of the ",(0,s.jsx)(t.a,{href:"/reference/glossary#merkle-accumulator",children:"Merkle accumulator"}),". This information is used to calculate the root hash of the current state of the Aptos blockchain."]}),"\n",(0,s.jsx)(t.li,{children:"The root hash of the current state is combined with the information about the transactions in the proposed block to determine the new root hash of the accumulator. This is done prior to persisting any data, and to ensure that no state or transaction is stored until agreement is reached by a quorum of validators."}),"\n",(0,s.jsxs)(t.li,{children:["Execution computes the speculative root hash and then the consensus component of V",(0,s.jsx)("sub",{children:"X"})," signs this root hash and attempts to reach agreement on this root hash with other validators."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"2-execution--vm",children:"2. Execution \u2192 VM"}),"\n",(0,s.jsxs)(t.p,{children:["When consensus requests execution to execute a block of transactions via ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::execute_block()"}),", execution uses the VM to determine the results of executing the block of transactions."]}),"\n",(0,s.jsx)(t.h3,{id:"3-consensus--execution",children:"3. Consensus \u2192 Execution"}),"\n",(0,s.jsxs)(t.p,{children:["If a quorum of validators agrees on the block execution results, the consensus component of each validator informs its execution component via ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::commit_blocks()"})," that this block is ready to be committed. This call to the execution component will include the signatures of the validators to provide proof of their agreement."]}),"\n",(0,s.jsx)(t.h3,{id:"4-execution--storage",children:"4. Execution \u2192 Storage"}),"\n",(0,s.jsxs)(t.p,{children:["Execution takes the values from its \u201cscratchpad\u201d and sends them to storage for persistence via ",(0,s.jsx)(t.code,{children:"DbWriter::save_transactions()"}),". Execution then prunes the old values from the \u201cscratchpad\u201d that are no longer needed (for example, parallel blocks that cannot be committed)."]}),"\n",(0,s.jsxs)(t.p,{children:["For implementation details refer to the ",(0,s.jsx)(t.a,{href:"https://github.com/aptos-labs/aptos-core/tree/main/execution",children:"Execution README"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"storage",children:"Storage"}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)(i.A,{alt:"Lifecycle of a transaction",sources:{light:(0,r.A)("/img/docs/6-life-of-txn.svg"),dark:(0,r.A)("/img/docs/6-life-of-txn-dark.svg")}})}),"\n",(0,s.jsxs)(t.p,{children:["The storage component persists agreed upon blocks of transactions and their execution results to the Aptos blockchain. A block of transactions (which includes transaction T",(0,s.jsx)("sub",{children:"N"}),") will be saved via storage when there is agreement between more than a quorum (2f+1) of the validators participating in consensus. Agreement must include all the following:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The transactions to include in the block"}),"\n",(0,s.jsx)(t.li,{children:"The order of the transactions"}),"\n",(0,s.jsx)(t.li,{children:"The execution results of the transactions in the block"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Refer to ",(0,s.jsx)(t.a,{href:"/reference/glossary#merkle-accumulator",children:"Merkle accumulator"})," for information on how a transaction is appended to the data structure representing the Aptos blockchain."]}),"\n",(0,s.jsx)(t.h3,{id:"1-vm--storage",children:"1. VM \u2192 Storage"}),"\n",(0,s.jsxs)(t.p,{children:["When mempool invokes ",(0,s.jsx)(t.code,{children:"VMValidator::validate_transaction()"})," to validate a transaction, ",(0,s.jsx)(t.code,{children:"VMValidator::validate_transaction()"})," loads the sender's account from storage and performs read-only validity checks on the transaction."]}),"\n",(0,s.jsx)(t.h3,{id:"2-execution--storage",children:"2. Execution \u2192 Storage"}),"\n",(0,s.jsxs)(t.p,{children:["When the consensus component calls ",(0,s.jsx)(t.code,{children:"BlockExecutorTrait::execute_block()"}),", execution reads the current state from storage combined with the in-memory \u201cscratchpad\u201d data to determine the execution results."]}),"\n",(0,s.jsx)(t.h3,{id:"3-execution--storage",children:"3. Execution \u2192 Storage"}),"\n",(0,s.jsxs)(t.p,{children:["Once consensus is reached on a block of transactions, execution calls storage via ",(0,s.jsx)(t.code,{children:"DbWriter::save_transactions()"})," to save the block of transactions and permanently record them. This will also store the signatures from the validator nodes that agreed on this block of transactions. The in-memory data in \u201cscratchpad\u201d for this block is passed to update storage and persist the transactions. When the storage is updated, every account that was modified by these transactions will have its sequence number incremented by one."]}),"\n",(0,s.jsx)(t.p,{children:"Note: The sequence number of an account on the Aptos blockchain increments by one for each committed transaction originating from that account."}),"\n",(0,s.jsx)(t.h3,{id:"4-rest-service--storage-1",children:"4. REST Service \u2192 Storage"}),"\n",(0,s.jsx)(t.p,{children:"For client queries that read information from the blockchain, the REST service directly interacts with storage to read the requested information."}),"\n",(0,s.jsxs)(t.p,{children:["For implementation details refer to the ",(0,s.jsx)(t.a,{href:"https://github.com/aptos-labs/aptos-core/tree/main/storage",children:"Storage README"}),"."]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},83581:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(11855);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);