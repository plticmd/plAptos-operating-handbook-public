"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[8556],{53376:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=o(63159),s=o(83581);const r={title:"Bootstrap a Node",slug:"operations-index"},a="Bootstrap a Node with historical data",i={id:"nodes/operations/index",title:"Bootstrap a Node",description:"Bootstrapping a new node usually only depends on state sync in its fast sync mode, which synchronises to a recent state with help from its peers and start syncing recent ledger history from there. However, if longer ledger history is needed for any reason, we have these choices:",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/nodes/operations/index.md",sourceDirName:"nodes/operations",slug:"/nodes/operations/operations-index",permalink:"/nodes/operations/operations-index",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/nodes/operations/index.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Bootstrap a Node",slug:"operations-index"},sidebar:"nodeSidebar",previous:{title:"Customize PFN Networks",permalink:"/nodes/full-node/fullnode-network-connections"},next:{title:"Bootstrap from a Snapshot",permalink:"/nodes/full-node/bootstrap-fullnode"}},d={},l=[{value:"Bootstrap from a Snapshot",id:"bootstrap-from-a-snapshot",level:3},{value:"Bootstrap from a Backup",id:"bootstrap-from-a-backup",level:3}];function c(e){const t={a:"a",h1:"h1",h3:"h3",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"bootstrap-a-node-with-historical-data",children:"Bootstrap a Node with historical data"}),"\n",(0,n.jsxs)(t.p,{children:["Bootstrapping a new node usually only depends on ",(0,n.jsx)(t.a,{href:"/guides/state-sync",children:"state sync"})," in its fast sync mode, which synchronises to a recent state with help from its peers and start syncing recent ledger history from there. However, if longer ledger history is needed for any reason, we have these choices:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.h3,{id:"bootstrap-from-a-snapshot",children:(0,n.jsx)(t.a,{href:"/nodes/full-node/bootstrap-fullnode",children:"Bootstrap from a Snapshot"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.h3,{id:"bootstrap-from-a-backup",children:(0,n.jsx)(t.a,{href:"/nodes/full-node/aptos-db-restore",children:"Bootstrap from a Backup"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},83581:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var n=o(11855);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);