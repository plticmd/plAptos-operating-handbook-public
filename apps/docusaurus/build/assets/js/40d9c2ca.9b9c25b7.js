"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[705],{70644:(n,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var e=a(63159),s=a(83581);const i={title:"Transaction Builder"},r="TS SDK Transaction Builder",o={id:"sdks/ts-sdk/transaction-builder",title:"Transaction Builder",description:"The SDK provides a simplified and meaningful transaction builder flow to handles the transaction creation lifecycle.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/sdks/ts-sdk/transaction-builder.md",sourceDirName:"sdks/ts-sdk",slug:"/sdks/ts-sdk/transaction-builder",permalink:"/sdks/ts-sdk/transaction-builder",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/sdks/ts-sdk/transaction-builder.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Transaction Builder"},sidebar:"appSidebar",previous:{title:"Fetch data from chain",permalink:"/sdks/ts-sdk/fetch-data-from-chain"},next:{title:"HTTP Client",permalink:"/sdks/ts-sdk/http-client"}},c={},l=[{value:"Submit transaction",id:"submit-transaction",level:2},{value:"Simple transaction",id:"simple-transaction",level:3},{value:"Complex transaction - Multi agent",id:"complex-transaction---multi-agent",level:3},{value:"Complex transaction - Simple transaction with Sponsor transaction",id:"complex-transaction---simple-transaction-with-sponsor-transaction",level:3},{value:"Complex transaction - Multi agent with Sponsor transaction",id:"complex-transaction---multi-agent-with-sponsor-transaction",level:3},{value:"Simulate transaction",id:"simulate-transaction",level:2},{value:"Simple transaction",id:"simple-transaction-1",level:3},{value:"Complex transaction - Multi agent",id:"complex-transaction---multi-agent-1",level:3},{value:"Complex transaction - Simple transaction with Sponsor transaction",id:"complex-transaction---simple-transaction-with-sponsor-transaction-1",level:3},{value:"Complex transaction - Multi agent with Sponsor transaction",id:"complex-transaction---multi-agent-with-sponsor-transaction-1",level:3},{value:"Transaction Management",id:"transaction-management",level:2}];function d(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.h1,{id:"ts-sdk-transaction-builder",children:"TS SDK Transaction Builder"}),"\n",(0,e.jsx)(t.p,{children:"The SDK provides a simplified and meaningful transaction builder flow to handles the transaction creation lifecycle."}),"\n",(0,e.jsxs)(t.p,{children:["The transaction builder is separated to different namespaces for each transaction step in the transaction submission flow.\nEach namespace/step can be accessed by initiating the ",(0,e.jsx)(t.a,{href:"/sdks/ts-sdk/sdk-configuration",children:"Aptos class"})]}),"\n",(0,e.jsxs)(t.ul,{children:["\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"build"})," - Build a raw transaction that can be signed and then submitted to chain"]}),"\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"simulate"})," - Simulate a transaction before signing and submitting to chain"]}),"\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"sign"})," - Sign a raw transaction to later submit to chain"]}),"\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"submit"})," - Submit a transaction to chain"]}),"\n"]}),"\n",(0,e.jsx)(t.p,{children:"Each step provides supports to all the different transaction types Aptos supports -"}),"\n",(0,e.jsxs)(t.ul,{children:["\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"simple transaction"})," - Single signer"]}),"\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.strong,{children:"complex transaction"})," - Sponsor and multi agent"]}),"\n"]}),"\n",(0,e.jsx)(t.h2,{id:"submit-transaction",children:"Submit transaction"}),"\n",(0,e.jsx)(t.h3,{id:"simple-transaction",children:"Simple transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'// build a transaction\nconst transaction = await aptos.transaction.build.simple({\n  sender: alice.accountAddress,\n  data: {\n    function: "0x1::coin::transfer",\n    typeArguments: ["0x1::aptos_coin::AptosCoin"],\n    functionArguments: [bobAddress, 100],\n  },\n});\n\n// using sign and submit separately\nconst senderAuthenticator = aptos.transaction.sign({\n  signer: alice,\n  transaction,\n});\nconst committedTransaction = await aptos.transaction.submit.simple({\n  transaction,\n  senderAuthenticator,\n});\n\n// using signAndSubmit combined\nconst committedTransaction = await aptos.signAndSubmitTransaction({\n  signer: alice,\n  transaction,\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---multi-agent",children:"Complex transaction - Multi agent"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'// build a transaction\nconst transaction = await aptos.transaction.build.multiAgent({\n  sender: alice.accountAddress,\n  secondarySignerAddresses: [secondarySignerAccount.accountAddress],\n  data: {\n    function: "0x1::coin::transfer",\n    typeArguments: ["0x1::aptos_coin::AptosCoin"],\n    functionArguments: [bobAddress, 100],\n  },\n});\n\n// sign transaction\nconst senderAuthenticator = aptos.transaction.sign({\n  signer: alice,\n  transaction,\n});\nconst secondarySignerAuthenticator = aptos.transaction.sign({\n  signer: secondarySignerAccount,\n  transaction,\n});\n// submit transaction\nconst committedTransaction = await aptos.transaction.submit.multiAgent({\n  transaction,\n  senderAuthenticator,\n  additionalSignersAuthenticators: [secondarySignerAuthenticator],\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---simple-transaction-with-sponsor-transaction",children:"Complex transaction - Simple transaction with Sponsor transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'// build a transaction\nconst transaction = await aptos.transaction.build.simple({\n  sender: alice.accountAddress,\n  withFeePayer: true,\n  data: {\n    function: "0x1::coin::transfer",\n    typeArguments: ["0x1::aptos_coin::AptosCoin"],\n    functionArguments: [bobAddress, 100],\n  },\n});\n\n// sign transaction\nconst senderAuthenticator = aptos.transaction.sign({\n  signer: alice,\n  transaction,\n});\nconst feePayerSignerAuthenticator = aptos.transaction.signAsFeePayer({\n  signer: feePayerAccount,\n  transaction,\n});\n// submit transaction\nconst committedTransaction = await aptos.transaction.submit.simple({\n  transaction,\n  senderAuthenticator,\n  feePayerAuthenticator: feePayerSignerAuthenticator,\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---multi-agent-with-sponsor-transaction",children:"Complex transaction - Multi agent with Sponsor transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'// build a transaction\nconst transaction = await aptos.transaction.build.multiAgent({\n  sender: alice.accountAddress,\n  secondarySignerAddresses: [secondarySignerAccount.accountAddress],\n  withFeePayer: true,\n  data: {\n    function: "0x1::coin::transfer",\n    typeArguments: ["0x1::aptos_coin::AptosCoin"],\n    functionArguments: [bobAddress, 100],\n  },\n});\n\n// sign transaction\nconst senderAuthenticator = aptos.transaction.sign({\n  signer: alice,\n  transaction,\n});\nconst secondarySignerAuthenticator = aptos.transaction.sign({\n  signer: secondarySignerAccount,\n  transaction,\n});\nconst feePayerSignerAuthenticator = aptos.transaction.signAsFeePayer({\n  signer: feePayerAccount,\n  transaction,\n});\n// submit transaction\nconst committedTransaction = await aptos.transaction.submit.multiAgent({\n  transaction,\n  senderAuthenticator,\n  additionalSignersAuthenticators: [secondarySignerAuthenticator],\n  feePayerAuthenticator: feePayerSignerAuthenticator,\n});\n'})}),"\n",(0,e.jsx)(t.h2,{id:"simulate-transaction",children:"Simulate transaction"}),"\n",(0,e.jsx)(t.h3,{id:"simple-transaction-1",children:"Simple transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'const transaction = await aptos.transaction.build.simple({\n  sender: alice.accountAddress,\n  data: {\n    function: "0x1::coin::transfer",\n    functionArguments: [bobAddress, 100],\n  },\n});\nconst [userTransactionResponse] = await aptos.transaction.simulate.simple({\n  signerPublicKey: alice.publicKey,\n  transaction,\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---multi-agent-1",children:"Complex transaction - Multi agent"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'const transaction = await aptos.transaction.build.multiAgent({\n  sender: alice.accountAddress,\n  secondarySignerAddresses: [secondarySignerAccount.accountAddress],\n  data: {\n    function: "0x1::coin::transfer",\n    functionArguments: [bobAddress, 100],\n  },\n});\nconst [userTransactionResponse] = await aptos.transaction.simulate.multiAgent({\n  signerPublicKey: alice.publicKey,\n  transaction,\n  secondarySignersPublicKeys: [secondarySignerAccount.publicKey],\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---simple-transaction-with-sponsor-transaction-1",children:"Complex transaction - Simple transaction with Sponsor transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'const transaction = await aptos.transaction.build.simple({\n  sender: alice.accountAddress,\n  withFeePayer: true,\n  data: {\n    function: "0x1::coin::transfer",\n    functionArguments: [bobAddress, 100],\n  },\n});\nconst [userTransactionResponse] = await aptos.transaction.simulate.simple({\n  signerPublicKey: alice.publicKey,\n  transaction,\n  feePayerPublicKey: feePayerAccount.publicKey,\n});\n'})}),"\n",(0,e.jsx)(t.h3,{id:"complex-transaction---multi-agent-with-sponsor-transaction-1",children:"Complex transaction - Multi agent with Sponsor transaction"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'const transaction = await aptos.transaction.build.multiAgent({\n  sender: alice.accountAddress,\n  secondarySignerAddresses: [secondarySignerAccount.accountAddress],\n  withFeePayer: true,\n  data: {\n    function: "0x1::coin::transfer",\n    functionArguments: [bobAddress, 100],\n  },\n});\nconst [userTransactionResponse] = await aptos.transaction.simulate.multiAgent({\n  signerPublicKey: alice.publicKey,\n  transaction,\n  secondarySignersPublicKeys: [secondarySignerAccount.publicKey],\n  feePayerPublicKey: feePayerAccount.publicKey,\n});\n'})}),"\n",(0,e.jsx)(t.h2,{id:"transaction-management",children:"Transaction Management"}),"\n",(0,e.jsx)(t.p,{children:"The TypeScript SDK provides a transaction management layer to submit as many transaction for a single account as possible while respecting a high throughput."}),"\n",(0,e.jsxs)(t.p,{children:["Read more about it ",(0,e.jsx)(t.a,{href:"https://aptos.dev/guides/transaction-management",children:"here"})]}),"\n",(0,e.jsx)(t.p,{children:"In the SDK, the transaction management layer implements 2 components"}),"\n",(0,e.jsxs)(t.ul,{children:["\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:"AccountSequenceNumber"})," that handles and manages an account sequence number."]}),"\n",(0,e.jsxs)(t.li,{children:[(0,e.jsx)(t.code,{children:"TransactionWorker"})," that provides a simple framework for receiving payloads to be processed"]}),"\n"]}),"\n",(0,e.jsx)(t.p,{children:"To use and leverage the transaction management layer, we provide an array of payloads to the batch function that in turns pass it into the worker to process and generate transactions and submit it to chain."}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-ts",children:'const aptos = new Aptos();\nconst sender = Account.generate();\nawait aptos.fundAccount({\n  accountAddress: sender.accountAddress,\n  amount: 10000000000,\n});\n// recipients is an array of accounts\nconst recipients = [Account.generate(), Account.generate(), Account.generate()];\n\n// create payloads\nconst payloads: InputGenerateTransactionPayloadData[] = [];\n\nfor (let i = 0; i < recipients.length; i += 1) {\n  const txn: InputGenerateTransactionPayloadData = {\n    function: "0x1::aptos_account::transfer",\n    functionArguments: [recipients[i].accountAddress, 10],\n  };\n  payloads.push(txn);\n}\n\nawait aptos.transaction.batch.forSingleAccount({ sender, data: payloads });\n'})})]})}function u(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,e.jsx)(t,{...n,children:(0,e.jsx)(d,{...n})}):d(n)}},83581:(n,t,a)=>{a.d(t,{R:()=>r,x:()=>o});var e=a(11855);const s={},i=e.createContext(s);function r(n){const t=e.useContext(i);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function o(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),e.createElement(i.Provider,{value:t},n.children)}}}]);