"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[9404],{53348:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=t(63159),o=t(83581);const i={title:"Important Node Metrics"},r=void 0,c={id:"nodes/measure/important-metrics",title:"Important Node Metrics",description:"When you visit the metrics endpoint (see Node Inspection Service), you will notice that",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/nodes/measure/important-metrics.md",sourceDirName:"nodes/measure",slug:"/nodes/measure/important-metrics",permalink:"/nodes/measure/important-metrics",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/nodes/measure/important-metrics.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Important Node Metrics"},sidebar:"nodeSidebar",previous:{title:"Node Inspection Service",permalink:"/nodes/measure/node-inspection-service"},next:{title:"Node Health Checker",permalink:"/nodes/measure/node-health-checker"}},a={},d=[{value:"Consensus",id:"consensus",level:3},{value:"State sync",id:"state-sync",level:3},{value:"Networking",id:"networking",level:3},{value:"Mempool",id:"mempool",level:3},{value:"REST API",id:"rest-api",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["When you visit the metrics endpoint (see ",(0,s.jsx)(n.a,{href:"/nodes/measure/node-inspection-service",children:"Node Inspection Service"}),"), you will notice that\nthere are a large number of metrics and counters being produced by your node. Most of these metrics and counters are\nuseful only for blockchain development and diagnosing hard-to-find issues. As a result, we recommend that node\noperators ignore most metrics and pay attention to only the key metrics presented below:"]}),"\n",(0,s.jsx)(n.admonition,{title:"Metric instability",type:"caution",children:(0,s.jsx)(n.p,{children:"As Aptos continues to grow and develop the blockchain software, many metrics will come and go.\nAs a result, we recommend relying on the presence of only the metrics explicitly mentioned below.\nAll other metrics should be considered unstable and may be changed/removed without warning."})}),"\n",(0,s.jsx)(n.h3,{id:"consensus",children:"Consensus"}),"\n",(0,s.jsxs)(n.p,{children:["If you are running a validator node, the following\n",(0,s.jsx)(n.a,{href:"/concepts/blockchain#consensus",children:"consensus"})," metrics are important:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aptos_consensus_proposals_count"}),": Counts the number of times the node sent a block\nproposal to the network. The count will increase only when the validator is chosen to be a proposer,\nwhich depends on the node's stake and leader election reputation. You should expect this metric to\nincrease at least once per hour."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aptos_consensus_last_committed_round"}),": Counts the last committed round of the node.\nDuring consensus, we expect this value to increase once per consensus round, which should be multiple\ntimes per second. If this does not happen, it is likely the node is not participating in consensus."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aptos_consensus_timeout_count"}),": Counts the number of times the node locally timed out while trying\nto participate in consensus. If this counter increases, it is likely the node is not participating\nin consensus and may be having issues, e.g., network difficulties."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'aptos_state_sync_executing_component_counters{label="consensus"'}),": This counter increases\na few times per second as long as the node is participating in consensus. When this counter stops\nincreasing, it means the node is not participating in consensus, and has likely fallen back to state\nsynchronization (e.g., because it fell behind the rest of the validators and needs to catch up)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"state-sync",children:"State sync"}),"\n",(0,s.jsxs)(n.p,{children:["If you are running a fullnode (or a validator that still needs to synchronize to the latest blockchain\nstate), the following ",(0,s.jsx)(n.a,{href:"/guides/state-sync",children:"state sync"})," metrics are important:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'aptos_state_sync_version{type="synced"}'}),": This metric displays the current synced version of the node,\ni.e., the number of transactions the node has processed. If this metric stops increasing, it means the\nnode is not syncing. Likewise, if this metric doesn't increase faster than the rate at which new transactions\nare committed to the blockchain, it means the node is unlikely to get and stay up-to-date with the rest of\nthe network. Note: if you've selected to use ",(0,s.jsx)(n.a,{href:"/guides/state-sync#fast-syncing",children:"fast sync"}),",\nthis metric won't increase until all states have been downloaded, which may take some time. See (3) below."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'aptos_data_client_highest_advertised_data{data_type="transactions"}'}),": This metric displays the highest\nversion synced and advertised by the peers that your node is connected to. As a result, when this metric is\nhigher than ",(0,s.jsx)(n.code,{children:'aptos_state_sync_version{type="synced"}'})," (above) it means your node can see new blockchain data and\nwill sync the data from its peers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'aptos_state_sync_version{type="synced_states"}'}),": This metric counts the number of states that have been\ndownloaded while a node is ",(0,s.jsx)(n.a,{href:"/guides/state-sync#fast-syncing",children:"fast syncing"}),". If this metric doesn't increase,\nand ",(0,s.jsx)(n.code,{children:'aptos_state_sync_version{type="synced"}'})," doesn't increase (from above), it means the node is not syncing\nat all and an issue has likely occurred."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aptos_state_sync_bootstrapper_errors"})," and ",(0,s.jsx)(n.code,{children:"aptos_state_sync_continuous_syncer_errors"}),": If your node is\nfacing issues syncing (or is seeing transient failures), these metrics will increase each time an error occurs.\nThe ",(0,s.jsx)(n.code,{children:"error_label"})," inside these metrics will display the error type."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Compare the synced version shown by ",(0,s.jsx)(n.code,{children:'aptos_state_sync_version{type="synced"}'})," with the highest version shown on the ",(0,s.jsx)(n.a,{href:"https://explorer.aptoslabs.com/?network=mainnet",children:"Aptos Explorer"})," to see how far behind the latest blockchain version your node is. Remember to select the correct network that your node is syncing to (e.g., ",(0,s.jsx)(n.code,{children:"mainnet"}),")."]})}),"\n",(0,s.jsx)(n.h3,{id:"networking",children:"Networking"}),"\n",(0,s.jsx)(n.p,{children:"The following network metrics are important, for both validators and fullnodes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'aptos_connections{direction="inbound"'})," and ",(0,s.jsx)(n.code,{children:'aptos_connections{direction="outbound"'}),": These metrics count\nthe number of peers your node is connected to, as well as the direction of the network connection. An ",(0,s.jsx)(n.code,{children:"inbound"}),"\nconnection means that a peer (e.g., another fullnode) has connected to you. An ",(0,s.jsx)(n.code,{children:"outbound"})," connection means that\nyour node has connected to another node (e.g., connected to a validator fullnode).","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If your node is a validator, the sum of both ",(0,s.jsx)(n.code,{children:"inbound"})," and ",(0,s.jsx)(n.code,{children:"outbound"})," connections should be equal to the\nnumber of other validators in the network. Note that only the sum of these connections matter. If all connections\nare ",(0,s.jsx)(n.code,{children:"inbound"}),", or all are ",(0,s.jsx)(n.code,{children:"outbound"}),", this doesn't matter."]}),"\n",(0,s.jsxs)(n.li,{children:["If your node is a fullnode, the number of ",(0,s.jsx)(n.code,{children:"outbound"})," connections should be ",(0,s.jsx)(n.code,{children:"> 0"}),". This will ensure your node is\nable to synchronize. Note that the number of ",(0,s.jsx)(n.code,{children:"inbound"})," connections matters only if you want to act as a seed in\nthe network and allow other nodes to connect to you as discussed\n",(0,s.jsx)(n.a,{href:"/nodes/full-node/fullnode-network-connections#allowing-pfn-connections",children:"Fullnode Network Connections"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"mempool",children:"Mempool"}),"\n",(0,s.jsxs)(n.p,{children:["The following ",(0,s.jsx)(n.a,{href:"/concepts/blockchain#mempool",children:"mempool"})," metrics are important:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'core_mempool_index_size{index="system_ttl"'}),": This metric displays the number of transactions currently sitting in\nthe mempool of the node and waiting to be committed to the blockchain:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If your node is a fullnode, it's highly unlikely that this metric will be ",(0,s.jsx)(n.code,{children:"> 0"}),", unless transactions are actively\nbeing sent to your node via the REST API and/or other fullnodes that have connected to you. Most fullnode operators\nshould ignore this metric."]}),"\n",(0,s.jsx)(n.li,{children:"If your node is a validator, you can use this metric to see if transactions from your node's mempool are being\nincluded in the blockchain (e.g., if the count decreases). Likewise, if this metric only increases, it means\nthat either: (i) your node is unable to forward transactions to other validators to be included in the blockchain; or\n(ii) that the entire blockchain is under heavy load and may soon become congested."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,s.jsxs)(n.p,{children:["The following ",(0,s.jsx)(n.a,{href:"https://aptos.dev/nodes/aptos-api-spec",children:"REST API"})," metrics are important:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:'aptos_api_requests_count{method="GET"'})," and ",(0,s.jsx)(n.code,{children:'aptos_api_requests_count{method="POST"'}),": These metrics count\nthe number of REST API ",(0,s.jsx)(n.code,{children:"GET"})," and ",(0,s.jsx)(n.code,{children:"POST"})," requests that have been received via the node's REST API. This\nallows you to monitor and track the amount of REST API traffic on your node. You can also further use the\n",(0,s.jsx)(n.code,{children:"operation_id"})," in the metric to monitor the types of operations the requests are performing."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"aptos_api_response_status_count"}),": This metric counts the number of response types that were sent for\nthe REST API. For example, ",(0,s.jsx)(n.code,{children:'aptos_api_response_status_count{status="200"}'})," counts the number of requests\nthat were successfully handled with a ",(0,s.jsx)(n.code,{children:"200"})," response code. You can use this metric to track the success and\nfailure rate of the REST API traffic."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},83581:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(11855);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);