"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[1079],{11838:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=s(63159),a=s(83581);const o={title:"Testing"},i="SDK Testing",r={id:"sdks/ts-sdk/testing",title:"Testing",description:"The SDK uses two types of tests, End-to-End (E2E) and unit tests, located under the tests folder.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/sdks/ts-sdk/testing.md",sourceDirName:"sdks/ts-sdk",slug:"/sdks/ts-sdk/testing",permalink:"/sdks/ts-sdk/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/sdks/ts-sdk/testing.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Testing"},sidebar:"appSidebar",previous:{title:"Move Types",permalink:"/sdks/ts-sdk/move-types"},next:{title:"Typescript",permalink:"/sdks/ts-sdk/typescript"}},d={},c=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"E2E Tests",id:"e2e-tests",level:2},{value:"Integration Tests",id:"integration-tests",level:2}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"sdk-testing",children:"SDK Testing"}),"\n",(0,n.jsxs)(e.p,{children:["The SDK uses two types of tests, ",(0,n.jsx)(e.code,{children:"End-to-End (E2E)"})," and ",(0,n.jsx)(e.code,{children:"unit"})," tests, located under the ",(0,n.jsx)(e.a,{href:"https://github.com/aptos-labs/aptos-ts-sdk/tree/main/tests",children:"tests"})," folder."]}),"\n",(0,n.jsx)(e.h2,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,n.jsx)(e.p,{children:"Unit tests are meant to test the output of a function in the SDK with the provided input. For example, we can test whether an account address is valid."}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:'test("account address is valid", () => {\n  const { valid } = AccountAddress.isValid({\n    input: "0x1",\n  });\n  expect(valid).toBe(true);\n});\n'})}),"\n",(0,n.jsxs)(e.p,{children:["Can check ",(0,n.jsx)(e.a,{href:"https://github.com/aptos-labs/aptos-ts-sdk/tree/main/tests/unit",children:"here"})," for the SDK unit tests"]}),"\n",(0,n.jsx)(e.h2,{id:"e2e-tests",children:"E2E Tests"}),"\n",(0,n.jsx)(e.p,{children:"End-to-end tests are meant to test the end-to-end operations starting from the SDK methods through to the blockchain."}),"\n",(0,n.jsx)(e.p,{children:"For example, to test if a transaction has been submitted, we start with building a transaction payload that the SDK expects, submit the request to the REST API, and fetch the transaction data to make sure it has been fully committed to the blockchain."}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:'test("transaction submission", async () => {\n  const transaction = await aptos.transaction.build.simple({\n    sender: sender.accountAddress,\n    data: {\n      function: `0x1::aptos_account::transfer`, // replace with your application\'s transaction\n      functionArguments: [receiver.accountAddress, 1],\n    },\n  });\n  const response = await aptos.signAndSubmitTransaction({\n    signer: sender,\n    transaction,\n  });\n  await aptos.waitForTransaction({\n    transactionHash: response.hash,\n  });\n  expect(response.success).toBe(true);\n});\n'})}),"\n",(0,n.jsxs)(e.p,{children:["Can check ",(0,n.jsx)(e.a,{href:"https://github.com/aptos-labs/aptos-ts-sdk/tree/main/tests/e2e",children:"here"})," for the SDK e2e tests"]}),"\n",(0,n.jsx)(e.h2,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,n.jsx)(e.p,{children:"The SDK provides an easy way to run integration tests by spinning up a local node and running tests against it. For example, one can build their integration tests against a local node with the SDK like below:"}),"\n",(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:"language-ts",children:'import { LocalNode, AptosConfig, Aptos } from "@aptos-labs/ts-sdk";\n// initiate a LocalNode instance\nconst localNode = new LocalNode();\n// Run a local node\nawait localNode.run();\n// Write some tests\ntest("test my app", async () => {\n  const aptosConfig = new AptosConfig({network:Network.LOCAL})\n  const aptos = new Aptos(aptosConfig)\n  // rest of test.....\n}\n// Stop the local node\nlocalNode.stop();\n'})})]})}function p(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},83581:(t,e,s)=>{s.d(e,{R:()=>i,x:()=>r});var n=s(11855);const a={},o=n.createContext(a);function i(t){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),n.createElement(o.Provider,{value:e},t.children)}}}]);