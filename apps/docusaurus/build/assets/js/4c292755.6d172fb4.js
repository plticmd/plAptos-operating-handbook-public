"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[7396],{1880:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=a(63159),i=a(83581);const s={title:"Your First Multisig",slug:"your-first-multisig"},r="Your First Multisig",c={id:"tutorials/first-multisig",title:"Your First Multisig",description:"This tutorial introduces assorted K-of-N multi-signer authentication operations and supplements content from the following tutorials:",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/first-multisig.md",sourceDirName:"tutorials",slug:"/tutorials/your-first-multisig",permalink:"/tutorials/your-first-multisig",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/first-multisig.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",frontMatter:{title:"Your First Multisig",slug:"your-first-multisig"},sidebar:"appSidebar",previous:{title:"Your First Move Module",permalink:"/tutorials/first-move-module"},next:{title:"Build E2E Dapp on Aptos",permalink:"/tutorials/build-e2e-dapp/e2e-dapp-index"}},o={},d=[{value:"Step 1: Pick an SDK",id:"step-1-pick-an-sdk",level:2},{value:"Step 2: Start the example",id:"step-2-start-the-example",level:2},{value:"Step 3: Generate single signer accounts",id:"step-3-generate-single-signer-accounts",level:2},{value:"Step 4: Generate a multisig account",id:"step-4-generate-a-multisig-account",level:2},{value:"Step 5: Fund all accounts",id:"step-5-fund-all-accounts",level:2},{value:"Step 6: Send coins from the multisig",id:"step-6-send-coins-from-the-multisig",level:2},{value:"Step 6.1: Gather individual signatures",id:"step-61-gather-individual-signatures",level:3},{value:"Step 6.2: Submit the multisig transaction",id:"step-62-submit-the-multisig-transaction",level:3},{value:"Step 6.3: Check balances",id:"step-63-check-balances",level:3},{value:"Step 7: Create a vanity address multisig",id:"step-7-create-a-vanity-address-multisig",level:2},{value:"Step 7.1 Generate a vanity address",id:"step-71-generate-a-vanity-address",level:3},{value:"Step 7.2 Sign a rotation proof challenge",id:"step-72-sign-a-rotation-proof-challenge",level:3},{value:"Step 7.3 Rotate the authentication key",id:"step-73-rotate-the-authentication-key",level:3},{value:"Step 8: Perform Move package governance",id:"step-8-perform-move-package-governance",level:2},{value:"Step 8.1: Review genesis package",id:"step-81-review-genesis-package",level:3},{value:"Step 8.2: Publish genesis package",id:"step-82-publish-genesis-package",level:3},{value:"Step 8.3: Review package upgrades",id:"step-83-review-package-upgrades",level:3},{value:"Step 8.4: Upgrade the package",id:"step-84-upgrade-the-package",level:3},{value:"Step 8.6: Review the governance script",id:"step-86-review-the-governance-script",level:3},{value:"Step 8.5: Execute the governance script",id:"step-85-execute-the-governance-script",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"your-first-multisig",children:"Your First Multisig"}),"\n",(0,t.jsxs)(n.p,{children:["This tutorial introduces assorted ",(0,t.jsx)(n.a,{href:"/concepts/accounts#multied25519-authentication",children:"K-of-N multi-signer authentication"})," operations and supplements content from the following tutorials:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/tutorials/your-first-transaction",children:"Your First Transaction"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/tutorials/your-first-coin",children:"Your First Coin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/tutorials/first-move-module",children:"Your First Move Module"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Try out the above tutorials (which include dependency installations) before moving on to multisig operations."})}),"\n",(0,t.jsx)(n.h2,{id:"step-1-pick-an-sdk",children:"Step 1: Pick an SDK"}),"\n",(0,t.jsxs)(n.p,{children:["This tutorial, a community contribution, was created for the ",(0,t.jsx)(n.a,{href:"/sdks/python-sdk/",children:"Python SDK"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Other developers are invited to add support for the ",(0,t.jsx)(n.a,{href:"/sdks/ts-sdk/",children:"TypeScript SDK"}),", ",(0,t.jsx)(n.a,{href:"/sdks/rust-sdk/",children:"Rust SDK"}),", and ",(0,t.jsx)(n.a,{href:"/sdks/unity-sdk/",children:"Unity SDK"}),"!"]}),"\n",(0,t.jsx)(n.h2,{id:"step-2-start-the-example",children:"Step 2: Start the example"}),"\n",(0,t.jsx)(n.p,{children:"Navigate to the Python SDK directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"cd <aptos-core-parent-directory>/aptos-core/ecosystem/python/sdk/\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Run the ",(0,t.jsx)(n.code,{children:"multisig.py"})," example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"poetry run python -m examples.multisig\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"This example uses the Aptos devnet, which has historically been reset each Thursday.\nMake sure devnet is live when you try running the example!"})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-generate-single-signer-accounts",children:"Step 3: Generate single signer accounts"}),"\n",(0,t.jsx)(n.p,{children:"First, we will generate single signer accounts for Alice, Bob, and Chad:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'alice = Account.generate()\nbob = Account.generate()\nchad = Account.generate()\n\nprint("\\n=== Account addresses ===")\nprint(f"Alice: {alice.address()}")\nprint(f"Bob:   {bob.address()}")\nprint(f"Chad:  {chad.address()}")\n\nprint("\\n=== Authentication keys ===")\nprint(f"Alice: {alice.auth_key()}")\nprint(f"Bob:   {bob.auth_key()}")\nprint(f"Chad:  {chad.auth_key()}")\n\nprint("\\n=== Public keys ===")\nprint(f"Alice: {alice.public_key()}")\nprint(f"Bob:   {bob.public_key()}")\nprint(f"Chad:  {chad.public_key()}")  \n'})}),"\n",(0,t.jsx)(n.p,{children:"Fresh accounts are generated for each example run, but the output should resemble:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Account addresses ===\nAlice: 0x93c1b7298d53dd0d517f503f2d3188fc62f6812ab94a412a955720c976fecf96\nBob:   0x85eb913e58d0885f6a966d98c76e4d00714cf6627f8db5903e1cd38cc86d1ce0\nChad:  0x14cf8dc376878ac268f2efc7ba65a2ee0ac13ceb43338b6106dd88d8d23e087a\n\n=== Authentication keys ===\nAlice: 0x93c1b7298d53dd0d517f503f2d3188fc62f6812ab94a412a955720c976fecf96\nBob:   0x85eb913e58d0885f6a966d98c76e4d00714cf6627f8db5903e1cd38cc86d1ce0\nChad:  0x14cf8dc376878ac268f2efc7ba65a2ee0ac13ceb43338b6106dd88d8d23e087a\n\n=== Public keys ===\nAlice: 0x3f23f869632aaa4378f3d68560e08d18b1fc2e80f91d6f9d1b39d720b0ef7a3f\nBob:   0xcf21e85337a313bdac33d068960a3e52d22ce0e6190e9acc03a1c9930e1eaf3e\nChad:  0xa1a2aef8525eb20655387d3ed50b9a3ea1531ef6117f579d0da4bcf5a2e1f76d\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For each user, note the ",(0,t.jsx)(n.a,{href:"/concepts/accounts#account-address",children:"account address"})," and ",(0,t.jsx)(n.a,{href:"/concepts/accounts#authentication-key",children:"authentication key"})," are identical, but the ",(0,t.jsx)(n.a,{href:"/concepts/accounts#creating-an-account",children:"public key"})," is different."]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-generate-a-multisig-account",children:"Step 4: Generate a multisig account"}),"\n",(0,t.jsxs)(n.p,{children:["Next generate a ",(0,t.jsx)(n.a,{href:"/concepts/accounts#multied25519-authentication",children:"K-of-N multi-signer"})," public key and account address for a multisig account requiring two of the three signatures:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'threshold = 2\n\nmultisig_public_key = MultiPublicKey(\n    [alice.public_key(), bob.public_key(), chad.public_key()], threshold\n)\n\nmultisig_address = AccountAddress.from_multi_ed25519(multisig_public_key)\n\nprint("\\n=== 2-of-3 Multisig account ===")\nprint(f"Account public key: {multisig_public_key}")\nprint(f"Account address:    {multisig_address}")  \n'})}),"\n",(0,t.jsx)(n.p,{children:"The multisig account address depends on the public keys of the single signers. (Hence, it will be different for each example.) But the output should resemble:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== 2-of-3 Multisig account ===\nAccount public key: 2-of-3 Multi-Ed25519 public key\nAccount address:    0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-5-fund-all-accounts",children:"Step 5: Fund all accounts"}),"\n",(0,t.jsx)(n.p,{children:"Next fund all accounts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Funding accounts ===")\nalice_start = 10_000_000\nbob_start = 20_000_000\nchad_start = 30_000_000\nmultisig_start = 40_000_000\n\nalice_fund = faucet_client.fund_account(alice.address(), alice_start)\nbob_fund = faucet_client.fund_account(bob.address(), bob_start)\nchad_fund = faucet_client.fund_account(chad.address(), chad_start)\nmultisig_fund = faucet_client.fund_account(multisig_address, multisig_start)\nawait asyncio.gather(*[alice_fund, bob_fund, chad_fund, multisig_fund])\n\nalice_balance = rest_client.account_balance(alice.address())\nbob_balance = rest_client.account_balance(bob.address())\nchad_balance = rest_client.account_balance(chad.address())\nmultisig_balance = rest_client.account_balance(multisig_address)\n[alice_balance, bob_balance, chad_balance, multisig_balance] = await asyncio.gather(\n    *[alice_balance, bob_balance, chad_balance, multisig_balance]\n)\n\nprint(f"Alice\'s balance:  {alice_balance}")\nprint(f"Bob\'s balance:    {bob_balance}")\nprint(f"Chad\'s balance:   {chad_balance}")\nprint(f"Multisig balance: {multisig_balance}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Funding accounts ===\nAlice's balance:  10000000\nBob's balance:    20000000\nChad's balance:   30000000\nMultisig balance: 40000000\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-6-send-coins-from-the-multisig",children:"Step 6: Send coins from the multisig"}),"\n",(0,t.jsx)(n.p,{children:"This transaction will send 100 octas from the multisig account to Chad's account.\nSince it is a two-of-three multisig account, signatures are required from only two individual signers."}),"\n",(0,t.jsx)(n.h3,{id:"step-61-gather-individual-signatures",children:"Step 6.1: Gather individual signatures"}),"\n",(0,t.jsx)(n.p,{children:"First generate a raw transaction, signed by Alice and Bob, but not by Chad."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'entry_function = EntryFunction.natural(\n    module="0x1::coin",\n    function="transfer",\n    ty_args=[TypeTag(StructTag.from_str("0x1::aptos_coin::AptosCoin"))],\n    args=[\n        TransactionArgument(chad.address(), Serializer.struct),\n        TransactionArgument(100, Serializer.u64),\n    ],\n)\n\nchain_id = await rest_client.chain_id()\nraw_transaction = RawTransaction(\n    sender=multisig_address,\n    sequence_number=0,\n    payload=TransactionPayload(entry_function),\n    max_gas_amount=rest_client.client_config.max_gas_amount,\n    gas_unit_price=rest_client.client_config.gas_unit_price,\n    expiration_timestamps_secs=(\n        int(time.time()) + rest_client.client_config.expiration_ttl\n    ),\n    chain_id=chain_id,\n)\n\nalice_signature = alice.sign(raw_transaction.keyed())\nbob_signature = bob.sign(raw_transaction.keyed())\n\nassert raw_transaction.verify(alice.public_key(), alice_signature)\nassert raw_transaction.verify(bob.public_key(), bob_signature)\n\nprint("\\n=== Individual signatures ===")\nprint(f"Alice: {alice_signature}")\nprint(f"Bob:   {bob_signature}")  \n'})}),"\n",(0,t.jsx)(n.p,{children:"Again, signatures vary for each example run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Individual signatures ===\nAlice: 0x41b9dd65857df2d8d8fba251336357456cc9f17974de93292c13226f560102eac1e70ddc7809a98cd54ddee9b79853e8bf7d18cfef23458f23e3a335c3189e0d\nBob:   0x6305101f8f3ad5a75254a8fa74b0d9866756abbf359f9e4f2b54247917caf8c52798a36c5a81c77505ebc1dc9b80f2643e8fcc056bcc4f795e80b229fa41e509\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-62-submit-the-multisig-transaction",children:"Step 6.2: Submit the multisig transaction"}),"\n",(0,t.jsx)(n.p,{children:"Next generate a multisig authenticator and submit the transaction:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'sig_map = [  # Map from signatory public key to signature.\n    (alice.public_key(), alice_signature),\n    (bob.public_key(), bob_signature),\n]\n\nmultisig_signature = MultiSignature(multisig_public_key, sig_map)\n\nauthenticator = Authenticator(\n    MultiEd25519Authenticator(multisig_public_key, multisig_signature)\n)\n\nsigned_transaction = SignedTransaction(raw_transaction, authenticator)\n\nprint("\\n=== Submitting transfer transaction ===")\n\ntx_hash = await rest_client.submit_bcs_transaction(signed_transaction)\nawait rest_client.wait_for_transaction(tx_hash)\nprint(f"Transaction hash: {tx_hash}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Submitting transfer transaction ===\nTransaction hash: 0x3ff2a848bf6145e6df3abb3ccb8b94fefd07ac16b4acb0c694fa7fa30b771f8c\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-63-check-balances",children:"Step 6.3: Check balances"}),"\n",(0,t.jsx)(n.p,{children:"Check the new account balances:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== New account balances===")\n\nalice_balance = rest_client.account_balance(alice.address())\nbob_balance = rest_client.account_balance(bob.address())\nchad_balance = rest_client.account_balance(chad.address())\nmultisig_balance = rest_client.account_balance(multisig_address)\n[alice_balance, bob_balance, chad_balance, multisig_balance] = await asyncio.gather(\n    *[alice_balance, bob_balance, chad_balance, multisig_balance]\n)\n\nprint(f"Alice\'s balance:  {alice_balance}")\nprint(f"Bob\'s balance:    {bob_balance}")\nprint(f"Chad\'s balance:   {chad_balance}")\nprint(f"Multisig balance: {multisig_balance}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== New account balances===\nAlice's balance:  10000000\nBob's balance:    20000000\nChad's balance:   30000100\nMultisig balance: 39999300\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that even though Alice and Bob signed the transaction, their account balances have not changed.\nChad, however, has received 100 octas from the multisig account, which assumed the gas costs of the transaction and thus has had more than 100 octas deducted."}),"\n",(0,t.jsx)(n.h2,{id:"step-7-create-a-vanity-address-multisig",children:"Step 7: Create a vanity address multisig"}),"\n",(0,t.jsx)(n.p,{children:"In this section, a fourth user named Deedee will generate a vanity address, then rotate her account to the two-of-three multisig."}),"\n",(0,t.jsx)(n.h3,{id:"step-71-generate-a-vanity-address",children:"Step 7.1 Generate a vanity address"}),"\n",(0,t.jsxs)(n.p,{children:["A fourth user, Deedee, wants her account address to start with ",(0,t.jsx)(n.code,{children:"0xdd.."}),", so she generates random accounts until she finds one with a matching account address:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Funding vanity address ===")\n\ndeedee = Account.generate()\n\nwhile str(deedee.address())[2:4] != "dd":\n    deedee = Account.generate()\n\nprint(f"Deedee\'s address:    {deedee.address()}")\nprint(f"Deedee\'s public key: {deedee.public_key()}")\n\ndeedee_start = 50_000_000\n\nawait faucet_client.fund_account(deedee.address(), deedee_start)\ndeedee_balance = await rest_client.account_balance(deedee.address())\nprint(f"Deedee\'s balance:    {deedee_balance}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Funding vanity address ===\nDeedee's address:    0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\nDeedee's public key: 0xdbf02311c45903f0217e9ab76ca64007c2876363118bb422922410d4cfe9964c\nDeedee's balance:    50000000\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-72-sign-a-rotation-proof-challenge",children:"Step 7.2 Sign a rotation proof challenge"}),"\n",(0,t.jsxs)(n.p,{children:["Deedee and the two-of-three multisig must both sign a ",(0,t.jsx)(n.code,{children:"RotationProofChallenge"}),", yielding two signatures.\nDeedee's signature, ",(0,t.jsx)(n.code,{children:"cap_rotate_key"}),", verifies that she approves of the authentication key rotation.\nThe multisig signature, ",(0,t.jsx)(n.code,{children:"cap_update_table"}),", verifies that the multisig approves of the authentication key rotation.\nHere, Bob and Chad provide individual signatures for the multisig:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Signing rotation proof challenge ===")\n\nrotation_proof_challenge = RotationProofChallenge(\n    sequence_number=0,\n    originator=deedee.address(),\n    current_auth_key=deedee.address(),\n    new_public_key=multisig_public_key.to_bytes(),\n)\n\nserializer = Serializer()\nrotation_proof_challenge.serialize(serializer)\nrotation_proof_challenge_bcs = serializer.output()\n\ncap_rotate_key = deedee.sign(rotation_proof_challenge_bcs).data()\n\ncap_update_table = MultiSignature(\n    multisig_public_key,\n    [\n        (bob.public_key(), bob.sign(rotation_proof_challenge_bcs)),\n        (chad.public_key(), chad.sign(rotation_proof_challenge_bcs)),\n    ],\n).to_bytes()\n\ncap_rotate_key_hex = f"0x{cap_rotate_key.hex()}"\ncap_update_table_hex = f"0x{cap_update_table.hex()}"\n\nprint(f"cap_rotate_key:   {cap_rotate_key_hex}")\nprint(f"cap_update_table: {cap_update_table_hex}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Signing rotation proof challenge ===\ncap_rotate_key:   0x3b2906df78bb79f210051e910985c358572c2ec7cdd03f688480fb6adf8d538df48a52787d5651d85f2959dcca88d58da49709c9c0dc9c3c58b67169ec1e1c01\ncap_update_table: 0x965fd11d7afe14396e5af40b8ffb78e6eb6f7caa1f1b1d8c7b819fdd6045864e70258788ec1670a3989c85f8cc604f4b54e43e1ce173a59aa0a6f7cf124fd902dcbb2ad53467d05c144260b2be1814777c082d8db437698b00e6a2109a015a565ff5783e827a21a4c07ae332b56398b69dfdbcc08b8ad5585dc1ac649b74730760000000\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-73-rotate-the-authentication-key",children:"Step 7.3 Rotate the authentication key"}),"\n",(0,t.jsx)(n.p,{children:"Now that the relevant signatures have been gathered, the authentication key rotation transaction can be submitted.\nAfter it executes, the rotated authentication key matches the address of the first multisig account (the one that sent octas to Chad):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Submitting authentication key rotation transaction ===")\n\nfrom_scheme = Authenticator.ED25519\nfrom_public_key_bytes = deedee.public_key().key.encode()\nto_scheme = Authenticator.MULTI_ED25519\nto_public_key_bytes = multisig_public_key.to_bytes()\n\nentry_function = EntryFunction.natural(\n    module="0x1::account",\n    function="rotate_authentication_key",\n    ty_args=[],\n    args=[\n        TransactionArgument(from_scheme, Serializer.u8),\n        TransactionArgument(from_public_key_bytes, Serializer.to_bytes),\n        TransactionArgument(to_scheme, Serializer.u8),\n        TransactionArgument(to_public_key_bytes, Serializer.to_bytes),\n        TransactionArgument(cap_rotate_key, Serializer.to_bytes),\n        TransactionArgument(cap_update_table, Serializer.to_bytes),\n    ],\n)\n\nsigned_transaction = await rest_client.create_bcs_signed_transaction(\n    deedee, TransactionPayload(entry_function)\n)\n\naccount_data = await rest_client.account(deedee.address())\nprint(f"Auth key pre-rotation: {account_data[\'authentication_key\']}")\n\ntx_hash = await rest_client.submit_bcs_transaction(signed_transaction)\nawait rest_client.wait_for_transaction(tx_hash)\nprint(f"Transaction hash:      {tx_hash}")\n\naccount_data = await rest_client.account(deedee.address())\nprint(f"New auth key:          {account_data[\'authentication_key\']}")\nprint(f"1st multisig address:  {multisig_address}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Submitting authentication key rotation transaction ===\nAuth key pre-rotation: 0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\nTransaction hash:      0x57c66089a1b81e2895a2d6919ab19eb90c4d3c3cbe9fecab8169eaeedff2c6e6\nNew auth key:          0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n1st multisig address:  0x08cac3b7b7ce4fbc5b18bc039279d7854e4c898cbf82518ac2650b565ad4d364\n"})}),"\n",(0,t.jsx)(n.p,{children:"In other words, Deedee generated an account with a vanity address so that Alice, Bob, and Chad could use it as a multisig account.\nThen Deedee and the Alice/Bob/Chad group (under the authority of Bob and Chad) approved to rotate the vanity account's authentication key to the authentication key of the first multisig account."}),"\n",(0,t.jsx)(n.h2,{id:"step-8-perform-move-package-governance",children:"Step 8: Perform Move package governance"}),"\n",(0,t.jsx)(n.p,{children:"In this section, the multisig vanity account will publish a simple package, upgrade it, then invoke a Move script."}),"\n",(0,t.jsxs)(n.p,{children:["Move source code for this section is found in the ",(0,t.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/tree/main/aptos-move/move-examples/upgrade_and_govern",children:(0,t.jsx)(n.code,{children:"upgrade_and_govern"})})," directory."]}),"\n",(0,t.jsx)(n.h3,{id:"step-81-review-genesis-package",children:"Step 8.1: Review genesis package"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"UpgradeAndGovern"})," genesis package (version ",(0,t.jsx)(n.code,{children:"1.0.0"}),") contains a simple ",(0,t.jsx)(n.code,{children:".toml"})," manifest and a single Move source file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:'title="Move.toml"',children:"[package]\nname = 'UpgradeAndGovern'\nversion = '1.0.0'\n\n[addresses]\nupgrade_and_govern = '_'\n\n[dependencies]\nAptosFramework = { git = \"https://github.com/aptos-labs/aptos-core.git\", rev = \"mainnet\", subdir = \"aptos-move/framework/aptos-framework\" }\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:'title="parameters.move"',children:"/// Mock on-chain governance parameters.\nmodule upgrade_and_govern::parameters {\n\n    struct GovernanceParameters has key {\n        parameter_1: u64,\n        parameter_2: u64\n    }\n\n    const GENESIS_PARAMETER_1: u64 = 123;\n    const GENESIS_PARAMETER_2: u64 = 456;\n\n    fun init_module(\n        upgrade_and_govern: &signer\n    ) {\n        let governance_parameters = GovernanceParameters{\n            parameter_1: GENESIS_PARAMETER_1,\n            parameter_2: GENESIS_PARAMETER_2};\n        move_to<GovernanceParameters>(\n            upgrade_and_govern, governance_parameters);\n    }\n\n    public fun get_parameters():\n    (u64, u64)\n    acquires GovernanceParameters {\n        let governance_parameters_ref =\n            borrow_global<GovernanceParameters>(@upgrade_and_govern);\n        (governance_parameters_ref.parameter_1,\n         governance_parameters_ref.parameter_2)\n    }\n\n} \n"})}),"\n",(0,t.jsxs)(n.p,{children:["As soon as the package is published, a ",(0,t.jsx)(n.code,{children:"GovernanceParameters"})," resource is moved to the ",(0,t.jsx)(n.code,{children:"upgrade_and_govern"})," package account with the values specified by ",(0,t.jsx)(n.code,{children:"GENESIS_PARAMETER_1"})," and ",(0,t.jsx)(n.code,{children:"GENESIS_PARAMETER_2"}),".\nThen, the ",(0,t.jsx)(n.code,{children:"get_parameters()"})," function can be used to look up the governance parameters, but note that in this version there is no setter function.\nThe setter function will be added later."]}),"\n",(0,t.jsx)(n.h3,{id:"step-82-publish-genesis-package",children:"Step 8.2: Publish genesis package"}),"\n",(0,t.jsx)(n.p,{children:"Here, Alice and Chad will sign off on the publication transaction."}),"\n",(0,t.jsx)(n.p,{children:"All compilation and publication operations are handled via the ongoing Python script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Genesis publication ===")\n\npackages_dir = "../../../aptos-move/move-examples/upgrade_and_govern/"\n\ncommand = (\n    f"aptos move compile "\n    f"--save-metadata "\n    f"--package-dir {packages_dir}genesis "\n    f"--named-addresses upgrade_and_govern={str(deedee.address())}"\n)\n\nprint(f"Running aptos CLI command: {command}\\n")\nsubprocess.run(command.split(), stdout=subprocess.PIPE)\n\nbuild_path = f"{packages_dir}genesis/build/UpgradeAndGovern/"\n\nwith open(f"{build_path}package-metadata.bcs", "rb") as f:\n    package_metadata = f.read()\n\nwith open(f"{build_path}bytecode_modules/parameters.mv", "rb") as f:\n    parameters_module = f.read()\n\nmodules_serializer = Serializer.sequence_serializer(Serializer.to_bytes)\n\npayload = EntryFunction.natural(\n    module="0x1::code",\n    function="publish_package_txn",\n    ty_args=[],\n    args=[\n        TransactionArgument(package_metadata, Serializer.to_bytes),\n        TransactionArgument([parameters_module], modules_serializer),\n    ],\n)\n\nraw_transaction = RawTransaction(\n    sender=deedee.address(),\n    sequence_number=1,\n    payload=TransactionPayload(payload),\n    max_gas_amount=rest_client.client_config.max_gas_amount,\n    gas_unit_price=rest_client.client_config.gas_unit_price,\n    expiration_timestamps_secs=(\n        int(time.time()) + rest_client.client_config.expiration_ttl\n    ),\n    chain_id=chain_id,\n)\n\nalice_signature = alice.sign(raw_transaction.keyed())\nchad_signature = chad.sign(raw_transaction.keyed())\n\nsig_map = [  # Map from signatory public key to signature.\n    (alice.public_key(), alice_signature),\n    (chad.public_key(), chad_signature),\n]\n\nmultisig_signature = MultiSignature(multisig_public_key, sig_map)\n\nauthenticator = Authenticator(\n    MultiEd25519Authenticator(multisig_public_key, multisig_signature)\n)\n\nsigned_transaction = SignedTransaction(raw_transaction, authenticator)\n\ntx_hash = await rest_client.submit_bcs_transaction(signed_transaction)\nawait rest_client.wait_for_transaction(tx_hash)\nprint(f"\\nTransaction hash: {tx_hash}")\n\nregistry = await rest_client.account_resource(\n    deedee.address(), "0x1::code::PackageRegistry"\n)\n\npackage_name = registry["data"]["packages"][0]["name"]\nn_upgrades = registry["data"]["packages"][0]["upgrade_number"]\n\nprint(f"Package name from on-chain registry: {package_name}")\nprint(f"On-chain upgrade number: {n_upgrades}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Genesis publication ===\nRunning aptos CLI command: aptos move compile --save-metadata --package-dir ../../../../aptos-move/move-examples/upgrade_and_govern/genesis --named-addresses upgrade_and_govern=0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\n\nCompiling, may take a little while to download git dependencies...\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING UpgradeAndGovern\n\nTransaction hash: 0x3c65c681194d6c64d73dc5d0cbcbad62e99a997b8600b8edad6847285e580c13\nPackage name from on-chain registry: UpgradeAndGovern\nOn-chain upgrade number: 0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-83-review-package-upgrades",children:"Step 8.3: Review package upgrades"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"UpgradeAndGovern"})," upgrade package adds the following parameter setter functionality at the end of ",(0,t.jsx)(n.code,{children:"parameters.move"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:"title=parameters.move",children:"    use std::signer::address_of;\n\n    const E_INVALID_AUTHORITY: u64 = 0;\n\n    public entry fun set_parameters(\n        upgrade_and_govern: &signer,\n        parameter_1: u64,\n        parameter_2: u64\n    ) acquires GovernanceParameters {\n        assert!(address_of(upgrade_and_govern) == @upgrade_and_govern,\n                E_INVALID_AUTHORITY);\n        let governance_parameters_ref_mut =\n            borrow_global_mut<GovernanceParameters>(@upgrade_and_govern);\n        governance_parameters_ref_mut.parameter_1 = parameter_1;\n        governance_parameters_ref_mut.parameter_2 = parameter_2;\n    }\n\n} \n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, the account that the package is published under, ",(0,t.jsx)(n.code,{children:"upgrade_and_govern"}),", has the authority to change the ",(0,t.jsx)(n.code,{children:"GovernanceParameter"})," values from the genesis values to the new ",(0,t.jsx)(n.code,{children:"parameter_1"})," and ",(0,t.jsx)(n.code,{children:"parameter_2"})," values."]}),"\n",(0,t.jsxs)(n.p,{children:["There is also a new module, ",(0,t.jsx)(n.code,{children:"transfer.move"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:"title=transfer.move",children:"/// Mock coin transfer module that invokes governance parameters.\nmodule upgrade_and_govern::transfer {\n\n    use aptos_framework::aptos_coin::AptosCoin;\n    use aptos_framework::coin;\n    use upgrade_and_govern::parameters;\n\n    public entry fun transfer_octas(\n        from: &signer,\n        to_1: address,\n        to_2: address\n    ) {\n        let (amount_1, amount_2) = parameters::get_parameters();\n        coin::transfer<AptosCoin>(from, to_1, amount_1);\n        coin::transfer<AptosCoin>(from, to_2, amount_2);\n    }\n\n} \n"})}),"\n",(0,t.jsxs)(n.p,{children:["This module simply looks up the ",(0,t.jsx)(n.code,{children:"GovernanceParameter"})," values, and treats them as the amount of octas to send to two recipients."]}),"\n",(0,t.jsxs)(n.p,{children:["Lastly, the manifest has been updated with the new version number ",(0,t.jsx)(n.code,{children:"1.1.0"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",metastring:"title=Move.toml",children:"[package]\nname = 'UpgradeAndGovern'\nversion = '1.1.0'\n\n[addresses]\nupgrade_and_govern = '_'\n\n[dependencies]\nAptosFramework = { git = \"https://github.com/aptos-labs/aptos-core.git\", rev = \"mainnet\", subdir = \"aptos-move/framework/aptos-framework\" } \n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-84-upgrade-the-package",children:"Step 8.4: Upgrade the package"}),"\n",(0,t.jsxs)(n.p,{children:["Alice, Bob, and Chad will all sign off on this publication transaction, which results in an upgrade.\nThis process is almost identical to that of the genesis publication, with the new ",(0,t.jsx)(n.code,{children:"transfer"})," module listed after the ",(0,t.jsx)(n.code,{children:"parameters"})," module:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Upgrade publication ===")\n\ncommand = (\n    f"aptos move compile "\n    f"--save-metadata "\n    f"--package-dir {packages_dir}upgrade "\n    f"--named-addresses upgrade_and_govern={str(deedee.address())}"\n)\n\nprint(f"Running aptos CLI command: {command}\\n")\nsubprocess.run(command.split(), stdout=subprocess.PIPE)\n\nbuild_path = f"{packages_dir}upgrade/build/UpgradeAndGovern/"\n\nwith open(f"{build_path}package-metadata.bcs", "rb") as f:\n    package_metadata = f.read()\n\nwith open(f"{build_path}bytecode_modules/parameters.mv", "rb") as f:\n    parameters_module = f.read()\n\nwith open(f"{build_path}bytecode_modules/transfer.mv", "rb") as f:\n    transfer_module = f.read()\n\npayload = EntryFunction.natural(\n    module="0x1::code",\n    function="publish_package_txn",\n    ty_args=[],\n    args=[\n        TransactionArgument(package_metadata, Serializer.to_bytes),\n        TransactionArgument(  # Transfer module listed second.\n            [parameters_module, transfer_module],\n            Serializer.sequence_serializer(Serializer.to_bytes),\n        ),\n    ],\n)\n\nraw_transaction = RawTransaction(\n    sender=deedee.address(),\n    sequence_number=2,\n    payload=TransactionPayload(payload),\n    max_gas_amount=rest_client.client_config.max_gas_amount,\n    gas_unit_price=rest_client.client_config.gas_unit_price,\n    expiration_timestamps_secs=(\n        int(time.time()) + rest_client.client_config.expiration_ttl\n    ),\n    chain_id=chain_id,\n)\n\nalice_signature = alice.sign(raw_transaction.keyed())\nbob_signature = bob.sign(raw_transaction.keyed())\nchad_signature = chad.sign(raw_transaction.keyed())\n\nsig_map = [  # Map from signatory public key to signature.\n    (alice.public_key(), alice_signature),\n    (bob.public_key(), bob_signature),\n    (chad.public_key(), chad_signature),\n]\n\nmultisig_signature = MultiSignature(multisig_public_key, sig_map)\n\nauthenticator = Authenticator(\n    MultiEd25519Authenticator(multisig_public_key, multisig_signature)\n)\n\nsigned_transaction = SignedTransaction(raw_transaction, authenticator)\n\ntx_hash = await rest_client.submit_bcs_transaction(signed_transaction)\nawait rest_client.wait_for_transaction(tx_hash)\nprint(f"\\nTransaction hash: {tx_hash}")\n\nregistry = await rest_client.account_resource(\n    deedee.address(), "0x1::code::PackageRegistry"\n)\n\nn_upgrades = registry["data"]["packages"][0]["upgrade_number"]\n\nprint(f"On-chain upgrade number: {n_upgrades}")  \n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Modules that ",(0,t.jsx)(n.code,{children:"use"})," other modules must be listed ",(0,t.jsx)(n.em,{children:"after"})," the modules they use."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Upgrade publication ===\nRunning aptos CLI command: aptos move compile --save-metadata --package-dir ../../../../aptos-move/move-examples/upgrade_and_govern/upgrade --named-addresses upgrade_and_govern=0xdd86860ae7f77f58d08188e1c39fbc6a2f7cec782f09f6767f8367d84357ed57\n\nCompiling, may take a little while to download git dependencies...\nINCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING UpgradeAndGovern\n\nTransaction hash: 0x0f0ea3bb7271ddeaceac5b49ff5503d6c652d4746c1510e47665ceee5a89aaf0\nOn-chain upgrade number: 1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that the on-chain upgrade number has been incremented by 1."}),"\n",(0,t.jsx)(n.h3,{id:"step-86-review-the-governance-script",children:"Step 8.6: Review the governance script"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"UpgradeAndGovern"})," upgrade package also includes a Move script at ",(0,t.jsx)(n.code,{children:"set_and_transfer.move"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:"title=set_and_transfer.move",children:"script {\n    use upgrade_and_govern::parameters;\n    use upgrade_and_govern::transfer;\n\n    const PARAMETER_1: u64 = 300;\n    const PARAMETER_2: u64 = 200;\n\n    fun set_and_transfer(\n        upgrade_and_govern: &signer,\n        to_1: address,\n        to_2: address\n    ) {\n        parameters::set_parameters(\n            upgrade_and_govern, PARAMETER_1, PARAMETER_2);\n        transfer::transfer_octas(upgrade_and_govern, to_1, to_2);\n    }\n} \n"})}),"\n",(0,t.jsx)(n.p,{children:"This script calls the governance parameter setter using hard-coded values defined at the top of the script, then calls the octa transfer function.\nThe script accepts as arguments the signature of the account hosting the package, as well as two target addresses for the transfer operation."}),"\n",(0,t.jsxs)(n.p,{children:["Note that both functions in the script are ",(0,t.jsx)(n.code,{children:"public entry fun"})," functions, which means that everything achieved in the script could be performed without a script.\nHowever, a non-script approach would require two transactions instead of just one, and would complicate the signature aggregation process:\nin practical terms, Alice, Bob, and/or Chad would likely have to send single-signer transaction signatures around through off-chain communication channels, and a ",(0,t.jsx)(n.em,{children:"scribe"})," for the group would then have to submit a multisig ",(0,t.jsx)(n.code,{children:"Authenticator"})," (for ",(0,t.jsx)(n.em,{children:"each"})," ",(0,t.jsx)(n.code,{children:"public entry fun"})," call).\nHence, in a non-script approach, extra operational complexity can quickly introduce opportunities for consensus failure."]}),"\n",(0,t.jsx)(n.p,{children:"A Move script, by contrast, collapses multiple governance function calls into a single transaction; and moreover, Move scripts can be published in a public forum like GitHub so that all signatories can review the actual function calls before they sign the script."}),"\n",(0,t.jsx)(n.h3,{id:"step-85-execute-the-governance-script",children:"Step 8.5: Execute the governance script"}),"\n",(0,t.jsx)(n.p,{children:"Alice and Bob sign off on the Move script, which sends coins from the vanity multisig account to their personal accounts.\nHere, the amounts sent to each account are specified in the hard-coded values from the script."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="multisig.py snippet"',children:'print("\\n=== Invoking Move script ===")\n\nwith open(f"{build_path}bytecode_scripts/set_and_transfer.mv", "rb") as f:\n    script_code = f.read()\n\npayload = Script(\n    code=script_code,\n    ty_args=[],\n    args=[\n        ScriptArgument(ScriptArgument.ADDRESS, alice.address()),\n        ScriptArgument(ScriptArgument.ADDRESS, bob.address()),\n    ],\n)\n\nraw_transaction = RawTransaction(\n    sender=deedee.address(),\n    sequence_number=3,\n    payload=TransactionPayload(payload),\n    max_gas_amount=rest_client.client_config.max_gas_amount,\n    gas_unit_price=rest_client.client_config.gas_unit_price,\n    expiration_timestamps_secs=(\n        int(time.time()) + rest_client.client_config.expiration_ttl\n    ),\n    chain_id=chain_id,\n)\n\nalice_signature = alice.sign(raw_transaction.keyed())\nbob_signature = bob.sign(raw_transaction.keyed())\n\nsig_map = [  # Map from signatory public key to signature.\n    (alice.public_key(), alice_signature),\n    (bob.public_key(), bob_signature),\n]\n\nmultisig_signature = MultiSignature(multisig_public_key, sig_map)\n\nauthenticator = Authenticator(\n    MultiEd25519Authenticator(multisig_public_key, multisig_signature)\n)\n\nsigned_transaction = SignedTransaction(raw_transaction, authenticator)\n\ntx_hash = await rest_client.submit_bcs_transaction(signed_transaction)\nawait rest_client.wait_for_transaction(tx_hash)\nprint(f"Transaction hash: {tx_hash}")\n\nalice_balance = rest_client.account_balance(alice.address())\nbob_balance = rest_client.account_balance(bob.address())\nchad_balance = rest_client.account_balance(chad.address())\nmultisig_balance = rest_client.account_balance(multisig_address)\n[alice_balance, bob_balance, chad_balance, multisig_balance] = await asyncio.gather(\n    *[alice_balance, bob_balance, chad_balance, multisig_balance]\n)\n\nprint(f"Alice\'s balance:  {alice_balance}")\nprint(f"Bob\'s balance:    {bob_balance}")\nprint(f"Chad\'s balance:   {chad_balance}")\nprint(f"Multisig balance: {multisig_balance}")  \n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",metastring:"title=Output",children:"=== Invoking Move script ===\nTransaction hash: 0xd06de4bd9fb12a9f3cbd8ce1b9a9fd47ea2b923a8cfac21f9788869430e4149b\nAlice's balance:  10000300\nBob's balance:    20000200\nChad's balance:   30000100\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Congratulations on completing the tutorial on K-of-N multi-signer authentication operations!"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},83581:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var t=a(11855);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);