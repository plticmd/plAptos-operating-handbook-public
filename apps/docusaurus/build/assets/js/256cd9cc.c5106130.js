"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[2006],{3332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var a=n(63159),l=n(83581);const s={title:"3. Add Wallet Support",id:"add-wallet-support"},r="3. Add Wallet Support",o={id:"tutorials/build-e2e-dapp/add-wallet-support",title:"3. Add Wallet Support",description:"In the third chapter of the tutorial on building an end-to-end dapp on Aptos, you will be adding wallet support to your React app. You now need a wallet to submit a transaction to the blockchain.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/build-e2e-dapp/3-add-wallet-support.md",sourceDirName:"tutorials/build-e2e-dapp",slug:"/tutorials/build-e2e-dapp/add-wallet-support",permalink:"/tutorials/build-e2e-dapp/add-wallet-support",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/build-e2e-dapp/3-add-wallet-support.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",sidebarPosition:3,frontMatter:{title:"3. Add Wallet Support",id:"add-wallet-support"},sidebar:"appSidebar",previous:{title:"2. Set up React App",permalink:"/tutorials/build-e2e-dapp/set-up-react-app"},next:{title:"4. Fetch Data from Chain",permalink:"/tutorials/build-e2e-dapp/fetch-data-from-chain"}},d={},i=[];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"3-add-wallet-support",children:"3. Add Wallet Support"}),"\n",(0,a.jsxs)(t.p,{children:["In the third chapter of the tutorial on ",(0,a.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/e2e-dapp-index",children:"building an end-to-end dapp on Aptos"}),", you will be adding ",(0,a.jsx)(t.em,{children:"wallet"})," support to your ",(0,a.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/set-up-react-app",children:"React app"}),". You now need a wallet to submit a transaction to the blockchain."]}),"\n",(0,a.jsxs)(t.p,{children:["Aptos provides a ",(0,a.jsx)(t.a,{href:"/integration/wallet-adapter-concept",children:"wallet adapter"})," that supports many ecosystem wallets to offering a common interface and UI package that can be used to add a wallet connect button and a wallet selector modal."]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Stop the local server if running."}),"\n",(0,a.jsxs)(t.li,{children:["In the ",(0,a.jsx)(t.code,{children:"client"})," folder, run:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cmd",children:"npm i @aptos-labs/wallet-adapter-react\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cmd",children:"npm i @aptos-labs/wallet-adapter-ant-design\n"})}),"\n",(0,a.jsx)(t.p,{children:"This installs two packages:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"the adapter React provider that holds the logic."}),"\n",(0,a.jsx)(t.li,{children:"a wallet connect UI package."}),"\n"]}),"\n",(0,a.jsxs)(t.ol,{start:"3",children:["\n",(0,a.jsxs)(t.li,{children:["We now need to add wallets to our app. There is a list of ",(0,a.jsx)(t.a,{href:"https://github.com/aptos-labs/aptos-wallet-adapter#supported-wallet-packages",children:"wallets the adapter supports"}),"; but to keep this tutorial simple, we will use only one wallet.\nStill in the ",(0,a.jsx)(t.code,{children:"client"})," folder, run"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-cmd",children:"npm i petra-plugin-wallet-adapter\n"})}),"\n",(0,a.jsxs)(t.admonition,{type:"tip",children:[(0,a.jsx)(t.p,{children:"If you haven't installed the Petra wallet extension yet:"}),(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://petra.app",children:"Install Petra Wallet"})," and open the Chrome extension."]}),"\n",(0,a.jsxs)(t.li,{children:["Follow the ",(0,a.jsx)(t.a,{href:"https://petra.app/docs/use",children:"user instructions"})," on petra.app for help."]}),"\n",(0,a.jsxs)(t.li,{children:["Switch to the Devnet network by clicking ",(0,a.jsx)(t.strong,{children:"Settings"})," > ",(0,a.jsx)(t.strong,{children:"Network"})," and selecting ",(0,a.jsx)(t.strong,{children:"devnet"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["Click the ",(0,a.jsx)(t.strong,{children:"Faucet"})," button to ensure you can receive test tokens."]}),"\n"]})]}),"\n",(0,a.jsxs)(t.ol,{start:"4",children:["\n",(0,a.jsxs)(t.li,{children:["Open ",(0,a.jsx)(t.code,{children:"Index.tsx"})," file. At the top of the file, add the following:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'import { PetraWallet } from "petra-plugin-wallet-adapter";\nimport { AptosWalletAdapterProvider } from "@aptos-labs/wallet-adapter-react";\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"5",children:["\n",(0,a.jsxs)(t.li,{children:["Still in ",(0,a.jsx)(t.code,{children:"Index.tsx"}),", add a constant that holds an array of wallets:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"...\nconst wallets = [new PetraWallet()];\n...\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"6",children:["\n",(0,a.jsxs)(t.li,{children:["Inside the ",(0,a.jsx)(t.code,{children:"render"})," method, update the code with the following:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"...\n<AptosWalletAdapterProvider plugins={wallets} autoConnect={true}>\n  <App />\n</AptosWalletAdapterProvider>\n...\n"})}),"\n",(0,a.jsx)(t.p,{children:"That wraps our app with the adapter provider and initializes it with our wallets. It also sets the provider to autoConnect a wallet."}),"\n",(0,a.jsxs)(t.ol,{start:"7",children:["\n",(0,a.jsxs)(t.li,{children:["Open the ",(0,a.jsx)(t.code,{children:"App.tsx"})," file and import the wallet connect UI package we installed in the previous step. At the top of the file add the following:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'import { WalletSelector } from "@aptos-labs/wallet-adapter-ant-design";\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"8",children:["\n",(0,a.jsxs)(t.li,{children:["The UI package uses a style ",(0,a.jsx)(t.code,{children:".css"})," file; let's import that one also at the bottom of the import statements."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'...\nimport "@aptos-labs/wallet-adapter-ant-design/dist/index.css";\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"9",children:["\n",(0,a.jsxs)(t.li,{children:["In the ",(0,a.jsx)(t.code,{children:"return"})," statement, remove the ",(0,a.jsx)(t.code,{children:"<h1>Connect Wallet</h1>"})," text and add the ",(0,a.jsx)(t.code,{children:"WalletSelector"})," component:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'...\n<Col span={12} style={{ textAlign: "right", paddingRight: "200px" }}>\n  <WalletSelector />\n</Col>\n...\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"10",children:["\n",(0,a.jsxs)(t.li,{children:["Start the local server with ",(0,a.jsx)(t.code,{children:"npm start"})," and open the app in the browser."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"We now have a working Wallet connect button and a wallet selector modal. Feel free to play with it and connect a wallet with it."}),"\n",(0,a.jsxs)(t.p,{children:["Then learn how to ",(0,a.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/fetch-data-from-chain",children:"fetch data from chain"})," in chapter 4."]})]})}function p(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},83581:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(11855);const l={},s=a.createContext(l);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);