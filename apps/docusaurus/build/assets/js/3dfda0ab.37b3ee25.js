"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[9714],{99824:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=e(63159),s=e(83581);const o={title:"5. Submit Data to Chain",id:"submit-data-to-chain"},i="5. Submit Data to Chain",r={id:"tutorials/build-e2e-dapp/submit-data-to-chain",title:"5. Submit Data to Chain",description:"In the fifth chapter of the tutorial on building an end-to-end dapp on Aptos, you will be submitting data to the chain.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/build-e2e-dapp/5-submit-data-to-chain.md",sourceDirName:"tutorials/build-e2e-dapp",slug:"/tutorials/build-e2e-dapp/submit-data-to-chain",permalink:"/tutorials/build-e2e-dapp/submit-data-to-chain",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/build-e2e-dapp/5-submit-data-to-chain.md",tags:[],version:"current",lastUpdatedAt:1713276994,formattedLastUpdatedAt:"2024\u5e744\u670816\u65e5",sidebarPosition:5,frontMatter:{title:"5. Submit Data to Chain",id:"submit-data-to-chain"},sidebar:"appSidebar",previous:{title:"4. Fetch Data from Chain",permalink:"/tutorials/build-e2e-dapp/fetch-data-from-chain"},next:{title:"6. Handle Tasks",permalink:"/tutorials/build-e2e-dapp/handle-tasks"}},c={},d=[];function l(n){const t={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"5-submit-data-to-chain",children:"5. Submit Data to Chain"}),"\n",(0,a.jsxs)(t.p,{children:["In the fifth chapter of the tutorial on ",(0,a.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/e2e-dapp-index",children:"building an end-to-end dapp on Aptos"}),", you will be submitting data to the chain."]}),"\n",(0,a.jsxs)(t.p,{children:["So now we have an ",(0,a.jsx)(t.strong,{children:"Add new list"})," button that appears if the connected account hasn\u2019t created a list yet. We still don't have a way for an account to create a list, so let\u2019s add that functionality."]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["First, our wallet adapter provider has a ",(0,a.jsx)(t.code,{children:"signAndSubmitTransaction"})," function; let\u2019s extract it by updating the following:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const { account, signAndSubmitTransaction } = useWallet();\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsxs)(t.li,{children:["Add an ",(0,a.jsx)(t.code,{children:"onClick"})," event to the new list button:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'<Button\n  onClick={addNewList}\n  block\n  type="primary"\n  style={{ height: "40px", backgroundColor: "#3f67ff" }}\n>\n  Add new list\n</Button>\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"3",children:["\n",(0,a.jsxs)(t.li,{children:["Update the import statement from ",(0,a.jsx)(t.code,{children:"@aptos-labs/wallet-adapter-react"})," to also import the ",(0,a.jsx)(t.code,{children:"InputTransactionData"})," type and"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'import {\n  useWallet,\n  InputTransactionData,\n} from "@aptos-labs/wallet-adapter-react";\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"4",children:["\n",(0,a.jsxs)(t.li,{children:["Add the ",(0,a.jsx)(t.code,{children:"addNewList"})," function:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"\nconst addNewList = async () => {\n  if (!account) return [];\n\n   const transaction:InputTransactionData = {\n      data: {\n        function:`${moduleAddress}::todolist::create_list`,\n        functionArguments:[]\n      }\n    }\n  try {\n    // sign and submit transaction to chain\n    const response = await signAndSubmitTransaction(transaction);\n    // wait for transaction\n    await aptos.waitForTransaction({transactionHash:response.hash});\n    setAccountHasList(true);\n  } catch (error: any) {\n    setAccountHasList(false);\n  }\n};\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"5",children:["\n",(0,a.jsxs)(t.li,{children:["Since our new function also uses ",(0,a.jsx)(t.code,{children:"moduleAddress"}),", let\u2019s get it out of the ",(0,a.jsx)(t.code,{children:"fetchList"})," function scope to the global scope so it can be used globally."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["In our ",(0,a.jsx)(t.code,{children:"fetchList"})," function, find the line:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'// replace with your own address\nconst moduleAddress =\n  "0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018";\n'})}),"\n",(0,a.jsxs)(t.p,{children:["And move it to outside of the main ",(0,a.jsx)(t.code,{children:"App"})," function, right beneath our const ",(0,a.jsx)(t.code,{children:"provider"})," declarations."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'export const aptos = new Aptos();\n// change this to be your module account address\nexport const moduleAddress =\n  "0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018";\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsxs)(t.strong,{children:["Let\u2019s go over the ",(0,a.jsx)(t.code,{children:"addNewList"})," function code."]})}),"\n",(0,a.jsxs)(t.p,{children:["First, we use the ",(0,a.jsx)(t.code,{children:"account"})," property from our wallet provider to make sure there is an account connected to our app."]}),"\n",(0,a.jsx)(t.p,{children:"Then we build our transaction data to be submitted to chain:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const transaction:InputTransactionData = {\n      data: {\n        function:`${moduleAddress}::todolist::create_list`,\n        functionArguments:[]\n      }\n    }\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"function"}),"- is built from the module address, module name and the function name."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"functionArguments"})," - the arguments the function expects, in our case it doesn\u2019t expect any arguments."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Next, we submit the transaction payload and wait for its response. The response returned from the ",(0,a.jsx)(t.code,{children:"signAndSubmitTransaction"})," function holds the transaction hash. Since it can take a bit for the transaction to be fully executed on chain and we also want to make sure it is executed successfully, we ",(0,a.jsx)(t.code,{children:"waitForTransaction"}),". And only then we can set our local ",(0,a.jsx)(t.code,{children:"accountHasList"})," state to ",(0,a.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,a.jsxs)(t.ol,{start:"6",children:["\n",(0,a.jsx)(t.li,{children:"Before testing our app, let\u2019s tweak our UI a bit and add a Spinner component to show up while we are waiting for the transaction.\nAdd a local state to keep track whether a transaction is in progress:"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const [transactionInProgress, setTransactionInProgress] =\n  useState<boolean>(false);\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"7",children:["\n",(0,a.jsxs)(t.li,{children:["Update our ",(0,a.jsx)(t.code,{children:"addNewList"})," function to update the local state:"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const addNewList = async () => {\n  if (!account) return [];\n  setTransactionInProgress(true);\n  const transaction:InputTransactionData = {\n      data: {\n        function:`${moduleAddress}::todolist::create_list`,\n        functionArguments:[]\n      }\n    }\n  try {\n    // sign and submit transaction to chain\n    const response = await signAndSubmitTransaction(transaction);\n    // wait for transaction\n    await aptos.waitForTransaction({transactionHash:response.hash});\n    setAccountHasList(true);\n  } catch (error: any) {\n    setAccountHasList(false);\n  } finally {\n    setTransactionInProgress(false);\n  }\n};\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"8",children:["\n",(0,a.jsxs)(t.li,{children:["Update the important statement from ",(0,a.jsx)(t.code,{children:"antd"})," to also import ",(0,a.jsx)(t.code,{children:"Spin"})]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:'import { Layout, Row, Col, Button, Spin } from "antd";\n'})}),"\n",(0,a.jsxs)(t.ol,{start:"9",children:["\n",(0,a.jsx)(t.li,{children:"Update our UI with the following:"}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:'return (\n  <>\n    ...\n    <Spin spinning={transactionInProgress}>\n      {!accountHasList && (\n        <Row gutter={[0, 32]} style={{ marginTop: "2rem" }}>\n          <Col span={8} offset={8}>\n            <Button\n              onClick={addNewList}\n              block\n              type="primary"\n              style={{ height: "40px", backgroundColor: "#3f67ff" }}\n            >\n              Add new list\n            </Button>\n          </Col>\n        </Row>\n      )}\n    </Spin>\n  </>\n);\n'})}),"\n",(0,a.jsx)(t.p,{children:"Now you can head over to our app, and add a new list!"}),"\n",(0,a.jsxs)(t.p,{children:["Since you haven\u2019t made the user interface able to handle cases where an account has created a list, you will do so next ",(0,a.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/handle-tasks",children:"handling tasks"})," in chapter 6."]})]})}function u(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},83581:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>r});var a=e(11855);const s={},o=a.createContext(s);function i(n){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);