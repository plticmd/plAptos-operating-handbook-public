"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[5300],{79754:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>i});var n=s(63159),o=s(83581);const a={title:"1. Create a Smart Contract",id:"create-a-smart-contract"},r="1. Create a Smart Contract",d={id:"tutorials/build-e2e-dapp/create-a-smart-contract",title:"1. Create a Smart Contract",description:"This is the first chapter of the tutorial on building an end-to-end dapp on Aptos. If you haven\u2019t done it, review that introduction, and ensure your environment meets the prerequisites listed there.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/tutorials/build-e2e-dapp/1-create-smart-contract.md",sourceDirName:"tutorials/build-e2e-dapp",slug:"/tutorials/build-e2e-dapp/create-a-smart-contract",permalink:"/tutorials/build-e2e-dapp/create-a-smart-contract",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/tutorials/build-e2e-dapp/1-create-smart-contract.md",tags:[],version:"current",lastUpdatedAt:1713370070,formattedLastUpdatedAt:"2024\u5e744\u670817\u65e5",sidebarPosition:1,frontMatter:{title:"1. Create a Smart Contract",id:"create-a-smart-contract"},sidebar:"appSidebar",previous:{title:"Build E2E Dapp on Aptos",permalink:"/tutorials/build-e2e-dapp/e2e-dapp-index"},next:{title:"2. Set up React App",permalink:"/tutorials/build-e2e-dapp/set-up-react-app"}},c={},i=[{value:"What is a <code>Move.toml</code> file?",id:"what-is-a-movetoml-file",level:3},{value:"Why <code>sources</code> directory?",id:"why-sources-directory",level:3},{value:"Create a Move module",id:"create-a-move-module",level:3},{value:"Our contract logic",id:"our-contract-logic",level:3},{value:"Create list function",id:"create-list-function",level:3},{value:"Create task function",id:"create-task-function",level:3},{value:"Complete task function",id:"complete-task-function",level:3},{value:"Add validations",id:"add-validations",level:3},{value:"Write tests",id:"write-tests",level:3},{value:"Publish todolist module to chain",id:"publish-todolist-module-to-chain",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"1-create-a-smart-contract",children:"1. Create a Smart Contract"}),"\n",(0,n.jsxs)(t.p,{children:["This is the first chapter of the tutorial on ",(0,n.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/e2e-dapp-index",children:"building an end-to-end dapp on Aptos"}),". If you haven\u2019t done it, review that introduction, and ensure your environment meets the ",(0,n.jsx)(t.a,{href:"/tools/aptos-cli/install-cli/",children:"prerequisites"})," listed there."]}),"\n",(0,n.jsx)(t.p,{children:"Now that you are all set up and at your terminal:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"cd"})," into the ",(0,n.jsx)(t.code,{children:"my-first-dapp"})," root directory, and create a new ",(0,n.jsx)(t.code,{children:"move"})," directory."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"cd"})," into the new ",(0,n.jsx)(t.code,{children:"move"})," directory and run: ",(0,n.jsx)(t.code,{children:"aptos move init --name my_todo_list"}),"\nThat command creates a ",(0,n.jsx)(t.code,{children:"sources/"})," directory and ",(0,n.jsx)(t.code,{children:"Move.toml"})," file inside the ",(0,n.jsx)(t.code,{children:"move"})," directory."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Your new ",(0,n.jsx)(t.code,{children:"move"})," directory should now resemble:"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"move-directory",src:s(90135).A+"",width:"574",height:"156"})}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.h3,{id:"what-is-a-movetoml-file",children:["What is a ",(0,n.jsx)(t.code,{children:"Move.toml"})," file?"]}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"Move.toml"})," file is a manifest file that contains metadata such as name, version, and dependencies for the package."]}),"\n",(0,n.jsxs)(t.p,{children:["Take a look at the new ",(0,n.jsx)(t.code,{children:"Move.toml"})," file. You should see your package information and an ",(0,n.jsx)(t.code,{children:"AptosFramework"})," dependency. Note that the ",(0,n.jsx)(t.code,{children:"name"})," property is the same ",(0,n.jsx)(t.code,{children:"--name"})," attribute we passed to the ",(0,n.jsx)(t.code,{children:"aptos move init"})," command before. The ",(0,n.jsx)(t.code,{children:"AptosFramework"})," dependency points to the ",(0,n.jsx)(t.code,{children:"aptos-core/aptos-move/framework/aptos-framework"})," GitHub repo main branch."]}),"\n",(0,n.jsxs)(t.h3,{id:"why-sources-directory",children:["Why ",(0,n.jsx)(t.code,{children:"sources"})," directory?"]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"sources"})," directory holds a collection of ",(0,n.jsx)(t.code,{children:".move"})," modules files. And later when we want to compile the package using the CLI, the compiler will look for that ",(0,n.jsx)(t.code,{children:"sources"})," directory and its ",(0,n.jsx)(t.code,{children:"Move.toml"})," file."]}),"\n",(0,n.jsx)(t.h3,{id:"create-a-move-module",children:"Create a Move module"}),"\n",(0,n.jsx)(t.p,{children:"An account is needed to publish a Move module. So first we need to create an account. Once we have the account's private key, we can create a module under its account address and publish the module using that account."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["In our ",(0,n.jsx)(t.code,{children:"move"})," directory, run ",(0,n.jsx)(t.code,{children:"aptos init --network devnet"}),". Press enter when prompted."]}),"\n",(0,n.jsxs)(t.p,{children:["This creates for us a ",(0,n.jsx)(t.code,{children:".aptos"})," directory with a ",(0,n.jsx)(t.code,{children:"config.yaml"})," file that holds our profile information. In the ",(0,n.jsx)(t.code,{children:"config.yaml"})," file, we now have our profiles list that holds a ",(0,n.jsx)(t.code,{children:"default"})," profile. If you open that file, you will see content resembling:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:'profiles:\n  default:\n    private_key: "0xee8f387ef0b4bb0018c4b91d1c0f71776a9b85935b4c6ec2823d6c0022fbf5cb"\n    public_key: "0xc6c07218d79a806380ca67761905063ec7a78d41f79619f4562462a0f8b6be11"\n    account: cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018\n    rest_url: "https://api.devnet.aptoslabs.com"\n    faucet_url: "https://faucet.devnet.aptoslabs.com"\n'})}),"\n",(0,n.jsxs)(t.p,{children:["From now on, whenever we run a CLI command in this ",(0,n.jsx)(t.code,{children:"move"})," directory, it will run with that default profile.\nWe use the ",(0,n.jsx)(t.code,{children:"devnet"})," network flag so eventually when we publish our package it will get published to the ",(0,n.jsx)(t.code,{children:"devnet"})," network."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["You just created a new account on the Aptos (dev) network! Yay! You can see it by going to the ",(0,n.jsx)(t.a,{href:"https://explorer.aptoslabs.com/?network=devnet",children:"Aptos Explorer"})," Devnet network view, pasting the ",(0,n.jsx)(t.code,{children:"account"})," address value from your configuration file into the search field, and clicking on the dropdown option!"]})}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["As mentioned, our ",(0,n.jsx)(t.code,{children:"sources"})," directory holds our ",(0,n.jsx)(t.code,{children:".move"})," module files; so let\u2019s add our first Move file."]}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Open the ",(0,n.jsx)(t.code,{children:"Move.toml"})," file."]}),"\n",(0,n.jsxs)(t.li,{children:["Add the following code to that Move file, substituting your actual default profile account address from ",(0,n.jsx)(t.code,{children:".aptos/config.yaml"}),":"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-toml",children:"[addresses]\ntodolist_addr='<default-profile-account-address>'\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If the default profile account address is ",(0,n.jsx)(t.code,{children:"cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018"}),", your ",(0,n.jsx)(t.code,{children:"Move.toml"})," file should look like:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-toml",children:"[addresses]\ntodolist_addr='cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018'\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"4",children:["\n",(0,n.jsxs)(t.li,{children:["Create a new ",(0,n.jsx)(t.code,{children:"todolist.move"})," file within the ",(0,n.jsx)(t.code,{children:"sources"})," directory and add the following to that file:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"module todolist_addr::todolist {\n\n}\n"})}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.p,{children:"A Move module is stored under an address (so when it published anyone can access it using that address); the syntax for a Move module is"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"module <account-address>::<module-name> {\n\n}\n"})}),(0,n.jsxs)(t.p,{children:["In our module, the ",(0,n.jsx)(t.code,{children:"account-address"})," is ",(0,n.jsx)(t.code,{children:"todolist_addr"})," (a variable we just declared on the ",(0,n.jsx)(t.code,{children:"Move.toml"})," file in the previous step that holds an ",(0,n.jsx)(t.code,{children:"address"}),"), and the ",(0,n.jsx)(t.code,{children:"module-name"})," is ",(0,n.jsx)(t.code,{children:"todolist"})," (a random name we selected)."]})]}),"\n",(0,n.jsx)(t.h3,{id:"our-contract-logic",children:"Our contract logic"}),"\n",(0,n.jsx)(t.p,{children:"Before jumping into writing code, let\u2019s first understand what we want our smart contract program to do. For ease of understanding, we will keep the logic pretty simple:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"An account creates a new list."}),"\n",(0,n.jsxs)(t.li,{children:["An account creates a new task on their list.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Whenever someone creates a new task, emit a ",(0,n.jsx)(t.code,{children:"task_created"})," event."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Let an account mark their task as completed."}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Creating an event is not mandatory yet useful if dapps/users want to monitor data, such as how many people create a new task, using the ",(0,n.jsx)(t.a,{href:"/indexer/indexer-landing",children:"Aptos Indexer"}),"."]})}),"\n",(0,n.jsxs)(t.p,{children:["We can start with defining a ",(0,n.jsx)(t.code,{children:"TodoList"})," struct, that holds the:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"tasks array"}),"\n",(0,n.jsx)(t.li,{children:"new task event"}),"\n",(0,n.jsx)(t.li,{children:"a task counter that counts the number of created tasks (we can use that to differentiate between the tasks)"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["And also create a ",(0,n.jsx)(t.code,{children:"Task"})," struct that holds:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"the task ID - derived from the TodoList task counter."}),"\n",(0,n.jsx)(t.li,{children:"address - the account address who created that task."}),"\n",(0,n.jsx)(t.li,{children:"content - the task content."}),"\n",(0,n.jsx)(t.li,{children:"completed - a boolean that marks whether that task is completed or not."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["On the ",(0,n.jsx)(t.code,{children:"todolist.move"})," file, update the content in the module with:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"...\nstruct TodoList has key {\n    tasks: Table<u64, Task>,\n    set_task_event: event::EventHandle<Task>,\n    task_counter: u64\n  }\n\nstruct Task has store, drop, copy {\n    task_id: u64,\n    address:address,\n    content: String,\n    completed: bool,\n  }\n...\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"What did we just add?"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"TodoList"})}),"\n",(0,n.jsxs)(t.p,{children:["A struct that has the ",(0,n.jsx)(t.code,{children:"key"})," and ",(0,n.jsx)(t.code,{children:"store"})," abilities:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Key"})," ability allows struct to be used as a storage identifier. In other words, ",(0,n.jsx)(t.code,{children:"key"}),"\nis an ability to be stored at the top-level and act as a storage. We need it here to have ",(0,n.jsx)(t.code,{children:"TodoList"})," be a resource stored in our user account."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["When a struct has the ",(0,n.jsx)(t.code,{children:"key"})," ability, it turns this struct into a ",(0,n.jsx)(t.code,{children:"resource"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Resource"})," is stored under the account - therefore it ",(0,n.jsx)(t.em,{children:"exists"})," only when assigned to an account and can be ",(0,n.jsx)(t.em,{children:"accessed"})," through this account only."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Task"})}),"\n",(0,n.jsxs)(t.p,{children:["A struct that has the ",(0,n.jsx)(t.code,{children:"store"}),", ",(0,n.jsx)(t.code,{children:"drop"})," and ",(0,n.jsx)(t.code,{children:"copy"}),"abilities."]}),"\n",(0,n.jsxs)(t.p,{children:["\u2022 ",(0,n.jsx)(t.code,{children:"Store"})," - Task needs ",(0,n.jsx)(t.code,{children:"Store"})," as it\u2019s stored inside another struct (TodoList)"]}),"\n",(0,n.jsxs)(t.p,{children:["\u2022 ",(0,n.jsx)(t.code,{children:"Copy"})," - value can be ",(0,n.jsx)(t.em,{children:"copied"})," (or cloned by value)."]}),"\n",(0,n.jsxs)(t.p,{children:["\u2022 ",(0,n.jsx)(t.code,{children:"Drop"})," - value can be ",(0,n.jsx)(t.em,{children:"dropped"})," by the end of scope."]}),"\n",(0,n.jsx)(t.p,{children:"Let\u2019s try to compile what we have now:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cd"})," into the ",(0,n.jsx)(t.code,{children:"move"})," directory."]}),"\n",(0,n.jsxs)(t.li,{children:["Run: ",(0,n.jsx)(t.code,{children:"aptos move compile"})]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Seeing errors?!"})," Let\u2019s understand them."]}),"\n",(0,n.jsxs)(t.p,{children:["We have some errors on ",(0,n.jsx)(t.code,{children:"Unbound type"}),"- this is happening because we used some types but never imported them, and the compiler doesn't know where to get them from."]}),"\n",(0,n.jsxs)(t.ol,{start:"3",children:["\n",(0,n.jsx)(t.li,{children:"On the top of the module, import those types by adding:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"...\nuse aptos_framework::event;\nuse std::string::String;\nuse aptos_std::table::Table;\n...\n"})}),"\n",(0,n.jsx)(t.p,{children:"That will tell the compiler where it can get those types from."}),"\n",(0,n.jsxs)(t.ol,{start:"4",children:["\n",(0,n.jsxs)(t.li,{children:["Run the ",(0,n.jsx)(t.code,{children:"aptos move compile"})," command again; If all goes well, we should see a response resembling (where the resulting account address is your default profile account address):"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'INCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING myTodolist\n{\n"Result": [\n    "cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist"\n  ]\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"At this point, we have successfully compiled our Move module. Yay!"}),"\n",(0,n.jsxs)(t.p,{children:["We also have a new ",(0,n.jsx)(t.code,{children:"move/build"})," directory (created by the compiler) that holds our compiled modules, build information and ",(0,n.jsx)(t.code,{children:"sources"})," directory."]}),"\n",(0,n.jsx)(t.h3,{id:"create-list-function",children:"Create list function"}),"\n",(0,n.jsx)(t.p,{children:"The first thing an account can and should do with our contract is to create a new list."}),"\n",(0,n.jsxs)(t.p,{children:["Creating a list is essentially submitting a transaction, and so we need to know the ",(0,n.jsx)(t.code,{children:"signer"})," who signed and submitted the transaction:"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a ",(0,n.jsx)(t.code,{children:"create_list"})," function that accepts a ",(0,n.jsx)(t.code,{children:"signer"})]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun create_list(account: &signer){\n\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Let\u2019s understand the components of this function"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"entry"})," - an ",(0,n.jsx)(t.em,{children:"entry"})," function is a function that can be called via transactions. Simply put, whenever you want to submit a transaction to the chain, you should call an entry function."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"&signer"})," - The ",(0,n.jsx)(t.strong,{children:"signer"})," argument is injected by the Move VM as the address who signed that transaction."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Our code has a ",(0,n.jsx)(t.code,{children:"TodoList"})," resource. Resource is stored under the account; therefore, it ",(0,n.jsx)(t.em,{children:"exists"})," only when assigned to an account and can be ",(0,n.jsx)(t.em,{children:"accessed"})," only through this account."]}),"\n",(0,n.jsxs)(t.p,{children:["That means to create the ",(0,n.jsx)(t.code,{children:"TodoList"})," resource, we need to assign it to an account that only this account can have access to."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"create_list"})," function can handle that ",(0,n.jsx)(t.code,{children:"TodoList"})," resource creation."]}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Add the following to the ",(0,n.jsx)(t.code,{children:"create_list"})," function"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun create_list(account: &signer){\n  let tasks_holder = TodoList {\n    tasks: table::new(),\n    set_task_event: account::new_event_handle<Task>(account),\n    task_counter: 0\n  };\n  // move the TodoList resource under the signer account\n  move_to(account, tasks_holder);\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This function takes in a ",(0,n.jsx)(t.code,{children:"signer"}),", creates a new ",(0,n.jsx)(t.code,{children:"TodoList"})," resource, and uses ",(0,n.jsx)(t.code,{children:"move_to"})," to have the resource stored in the provided signer account."]}),"\n",(0,n.jsx)(t.h3,{id:"create-task-function",children:"Create task function"}),"\n",(0,n.jsxs)(t.p,{children:["As mentioned before, our contract has a create task function that lets an account create a new task. Creating a task is also essentially submitting a transaction, and so we need to know the ",(0,n.jsx)(t.code,{children:"signer"})," who signed and submitted the transaction. Another element we want to accept in our function is the task ",(0,n.jsx)(t.code,{children:"content"}),"."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a ",(0,n.jsx)(t.code,{children:"create_task"})," function that accepts a ",(0,n.jsx)(t.code,{children:"signer"})," and task ",(0,n.jsx)(t.code,{children:"content"})," and the function logic."]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun create_task(account: &signer, content: String) acquires TodoList {\n    // gets the signer address\n    let signer_address = signer::address_of(account);\n    // gets the TodoList resource\n    let todo_list = borrow_global_mut<TodoList>(signer_address);\n    // increment task counter\n    let counter = todo_list.task_counter + 1;\n    // creates a new Task\n    let new_task = Task {\n      task_id: counter,\n      address: signer_address,\n      content,\n      completed: false\n    };\n    // adds the new task into the tasks table\n    table::upsert(&mut todo_list.tasks, counter, new_task);\n    // sets the task counter to be the incremented counter\n    todo_list.task_counter = counter;\n    // fires a new task created event\n    event::emit_event<Task>(\n      &mut borrow_global_mut<TodoList>(signer_address).set_task_event,\n      new_task,\n    );\n  }\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Since we now use two new modules - signer and table (you can see it being used in ",(0,n.jsx)(t.code,{children:"signer::"})," and ",(0,n.jsx)(t.code,{children:"table::"}),") - we need to import these modules.\nAt the top of the file, add those two use statements:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"use std::signer;\nuse aptos_std::table::{Self, Table}; // This one we already have, need to modify it\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Back to the code; what is happening here?"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["First, we want to get the signer address, so we can get this account\u2019s ",(0,n.jsx)(t.code,{children:"TodoList"})," resource."]}),"\n",(0,n.jsxs)(t.li,{children:["Then, we retrieve the ",(0,n.jsx)(t.code,{children:"TodoList"})," resource with the ",(0,n.jsx)(t.code,{children:"signer_address"}),"; with that we have access to the ",(0,n.jsx)(t.code,{children:"TodoList"})," properties."]}),"\n",(0,n.jsxs)(t.li,{children:["We can now increment the ",(0,n.jsx)(t.code,{children:"task_counter"})," property, and create a new ",(0,n.jsx)(t.code,{children:"Task"})," with the ",(0,n.jsx)(t.code,{children:"signer_address"}),", ",(0,n.jsx)(t.code,{children:"counter"})," and the provided ",(0,n.jsx)(t.code,{children:"content"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["We push it to the ",(0,n.jsx)(t.code,{children:"todo_list.tasks"})," table that holds all of our tasks along with the new ",(0,n.jsx)(t.code,{children:"counter"})," (which is the table key) and the newly created Task."]}),"\n",(0,n.jsxs)(t.li,{children:["Then we assign the global ",(0,n.jsx)(t.code,{children:"task_counter"})," to be the new incremented counter."]}),"\n",(0,n.jsxs)(t.li,{children:["Finally, we emit the ",(0,n.jsx)(t.code,{children:"task_created"})," event that holds the new Task data. ",(0,n.jsx)(t.code,{children:"emit_event"})," is an ",(0,n.jsx)(t.code,{children:"aptos-framework"})," function that accepts a reference to the event handle and a message. In our case, we are passing the function a reference (using the sign &) to the account\u2019s ",(0,n.jsx)(t.code,{children:"TodoListresource"})," ",(0,n.jsx)(t.code,{children:"set_task_event"})," property as the first argument and a second message argument which is the new Task we just created. Remember, we have a ",(0,n.jsx)(t.code,{children:"set_task_event"})," property in our ",(0,n.jsx)(t.code,{children:"TodoList"})," struct."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"complete-task-function",children:"Complete task function"}),"\n",(0,n.jsx)(t.p,{children:"Another function we want our contract to hold is the option to mark a task as completed."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a ",(0,n.jsx)(t.code,{children:"complete_task"})," function that accepts a ",(0,n.jsx)(t.code,{children:"signer"})," and a ",(0,n.jsx)(t.code,{children:"task_id"}),":"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut<TodoList>(signer_address);\n  // gets the task matches the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // update task as completed\n  task_record.completed = true;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Let\u2019s understand the code."})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["As before in our create list function, we retrieve the ",(0,n.jsx)(t.code,{children:"TodoList"})," struct by the signer address, so we can have access to the tasks table that holds all the account tasks."]}),"\n",(0,n.jsxs)(t.li,{children:["Then, we look for the task with the provided ",(0,n.jsx)(t.code,{children:"task_id"})," on the ",(0,n.jsx)(t.code,{children:"todo_list.tasks"})," table."]}),"\n",(0,n.jsx)(t.li,{children:"Finally, we update that task completed property to be true."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Now try to compile the code:"}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Run: ",(0,n.jsx)(t.code,{children:"aptos move compile"})]}),"\n",(0,n.jsxs)(t.li,{children:["Another ",(0,n.jsx)(t.code,{children:"Unbound"})," error? To fix this, add a ",(0,n.jsx)(t.code,{children:"use"})," statement to use the ",(0,n.jsx)(t.code,{children:"account"})," module."]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"use aptos_framework::account;\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"4",children:["\n",(0,n.jsxs)(t.li,{children:["run ",(0,n.jsx)(t.code,{children:"aptos move compile"})," again."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"add-validations",children:"Add validations"}),"\n",(0,n.jsx)(t.p,{children:"As this code now compiles, we want to have some validations and checks before creating a new task or updating the task as completed, so we can be sure our functions work as expected."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a check to the ",(0,n.jsx)(t.code,{children:"create_task"})," function to make sure the signer account has a list:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun create_task(account: &signer, content: String) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n\n  // assert signer has created a list\n  assert!(exists<TodoList>(signer_address), 1);\n\n  ...\n}\n"})}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Add a check to the ",(0,n.jsx)(t.code,{children:"complete_task"})," function to make sure the:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"signer has created a list."}),"\n",(0,n.jsx)(t.li,{children:"task exists."}),"\n",(0,n.jsx)(t.li,{children:"task is not completed."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"With:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  // assert signer has created a list\n  assert!(exists<TodoList>(signer_address), 1);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut<TodoList>(signer_address);\n  // assert task exists\n  assert!(table::contains(&todo_list.tasks, task_id), 2);\n  // gets the task matched the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // assert task is not completed\n  assert!(task_record.completed == false, 3);\n  // update task as completed\n  task_record.completed = true;\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["We just added our first ",(0,n.jsx)(t.code,{children:"assert"})," statements!"]}),"\n",(0,n.jsxs)(t.p,{children:["If you noticed, ",(0,n.jsx)(t.code,{children:"assert"})," accepts two arguments: the first is what to check for, and the second is an error code. Instead of passing in an arbitrary number, a convention is to declare ",(0,n.jsx)(t.code,{children:"errors"})," on the top of the module file and use these instead."]}),"\n",(0,n.jsxs)(t.p,{children:["On the top of the module file (under the ",(0,n.jsx)(t.code,{children:"use"})," statements), add those error declarations:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"// Errors\nconst E_NOT_INITIALIZED: u64 = 1;\nconst ETASK_DOESNT_EXIST: u64 = 2;\nconst ETASK_IS_COMPLETED: u64 = 3;\n"})}),"\n",(0,n.jsx)(t.p,{children:"Now we can update our asserts with these constants:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"public entry fun create_task(account: &signer, content: String) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n\n  // assert signer has created a list\n  assert!(exists<TodoList>(signer_address), E_NOT_INITIALIZED);\n\n  ...\n}\n\n\n\npublic entry fun complete_task(account: &signer, task_id: u64) acquires TodoList {\n  // gets the signer address\n  let signer_address = signer::address_of(account);\n  assert!(exists<TodoList>(signer_address), E_NOT_INITIALIZED);\n  // gets the TodoList resource\n  let todo_list = borrow_global_mut<TodoList>(signer_address);\n  // assert task exists\n  assert!(table::contains(&todo_list.tasks, task_id), ETASK_DOESNT_EXIST);\n  // gets the task matched the task_id\n  let task_record = table::borrow_mut(&mut todo_list.tasks, task_id);\n  // assert task is not completed\n  assert!(task_record.completed == false, ETASK_IS_COMPLETED);\n  // update task as completed\n  task_record.completed = true;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"WONDERFUL!!"})}),"\n",(0,n.jsxs)(t.p,{children:["Let\u2019s stop for one moment and make sure our code compiles by running the ",(0,n.jsx)(t.code,{children:"aptos move compile"})," command. If all goes well, we should output resembling:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'INCLUDING DEPENDENCY AptosFramework\nINCLUDING DEPENDENCY AptosStdlib\nINCLUDING DEPENDENCY MoveStdlib\nBUILDING myTodolist\n{\n"Result": [\n    "cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist"\n  ]\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"If you encounter errors, make sure you followed the steps above correctly and try to determine the cause of the issues."}),"\n",(0,n.jsx)(t.h3,{id:"write-tests",children:"Write tests"}),"\n",(0,n.jsx)(t.p,{children:"Now that we have our smart contract logic ready, we need to add some tests for it."}),"\n",(0,n.jsxs)(t.p,{children:["Test functions use the ",(0,n.jsx)(t.code,{children:"#[test]"})," annotation."]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Add the following code to the bottom of the file:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"#[test]\npublic entry fun test_flow() {\n\n}\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["we need to use ",(0,n.jsx)(t.code,{children:"entry"})," here because we are testing an ",(0,n.jsx)(t.code,{children:"entry"})," function."]})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsx)(t.li,{children:"For simplicity, and because we don't have much code to test, we use one function to test the whole flow of the app.\nThe test steps are:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"  // create a list\n  // create a task\n  // update task as completed\n"})}),"\n",(0,n.jsx)(t.p,{children:"Update the test function to be:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'#[test(admin = @0x123)]\npublic entry fun test_flow(admin: signer) acquires TodoList {\n  // creates an admin @todolist_addr account for test\n  account::create_account_for_test(signer::address_of(&admin));\n  // initialize contract with admin account\n  create_list(&admin);\n\n  // creates a task by the admin account\n  create_task(&admin, string::utf8(b"New Task"));\n  let task_count = event::counter(&borrow_global<TodoList>(signer::address_of(&admin)).set_task_event);\n  assert!(task_count == 1, 4);\n  let todo_list = borrow_global<TodoList>(signer::address_of(&admin));\n  assert!(todo_list.task_counter == 1, 5);\n  let task_record = table::borrow(&todo_list.tasks, todo_list.task_counter);\n  assert!(task_record.task_id == 1, 6);\n  assert!(task_record.completed == false, 7);\n  assert!(task_record.content == string::utf8(b"New Task"), 8);\n  assert!(task_record.address == signer::address_of(&admin), 9);\n\n  // updates task as completed\n  complete_task(&admin, 1);\n  let todo_list = borrow_global<TodoList>(signer::address_of(&admin));\n  let task_record = table::borrow(&todo_list.tasks, 1);\n  assert!(task_record.task_id == 1, 10);\n  assert!(task_record.completed == true, 11);\n  assert!(task_record.content == string::utf8(b"New Task"), 12);\n  assert!(task_record.address == signer::address_of(&admin), 13);\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Our ",(0,n.jsx)(t.code,{children:"#[test]"})," annotation has changed and declares an account variable."]}),"\n",(0,n.jsx)(t.p,{children:"Additionally, the function itself now accepts a signer argument."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Let\u2019s understand our tests."})}),"\n",(0,n.jsxs)(t.p,{children:["Since our tests run outside an account scope, we need to ",(0,n.jsx)(t.em,{children:"create"})," accounts to use in our tests. The ",(0,n.jsx)(t.code,{children:"#[test]"})," annotation gives us the option to declare those accounts. We use an ",(0,n.jsx)(t.code,{children:"admin"})," account and set it to a random account address (",(0,n.jsx)(t.code,{children:"@0x123"}),"). The function accepts this signer (account) and creates it by using a built-in function to create an account for test."]}),"\n",(0,n.jsx)(t.p,{children:"Then we simply go through the flow by:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"creating a list"}),"\n",(0,n.jsx)(t.li,{children:"creating a task"}),"\n",(0,n.jsx)(t.li,{children:"updating a task as completed"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"And assert the expected data/behavior at each step."}),"\n",(0,n.jsxs)(t.p,{children:["Before running the tests again, we need to import (",(0,n.jsx)(t.code,{children:"use"}),") some new modules we are now employing in our code:"]}),"\n",(0,n.jsxs)(t.ol,{start:"3",children:["\n",(0,n.jsxs)(t.li,{children:["At the top of the file, add this ",(0,n.jsx)(t.code,{children:"use"})," statement:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"use std::string::{Self, String}; // already have it, need to modify\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"4",children:["\n",(0,n.jsxs)(t.li,{children:["Run the ",(0,n.jsx)(t.code,{children:"aptos move test"})," command. If all goes right, we should see a success message like:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'Running Move unit tests\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::test_flow\nTest result: OK. Total tests: 1; passed: 1; failed: 0\n{\n  "Result": "Success"\n}\n'})}),"\n",(0,n.jsxs)(t.ol,{start:"5",children:["\n",(0,n.jsxs)(t.li,{children:["Let\u2019s add one more test to make sure our ",(0,n.jsx)(t.code,{children:"complete_task"})," function works as expected. Add another test function with:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"#[test(admin = @0x123)]\n#[expected_failure(abort_code = E_NOT_INITIALIZED)]\npublic entry fun account_can_not_update_task(admin: signer) acquires TodoList {\n  // creates an admin @todolist_addr account for test\n  account::create_account_for_test(signer::address_of(&admin));\n  // account can not toggle task as no list was created\n  complete_task(&admin, 2);\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"This test confirms that an account can\u2019t use that function if they haven\u2019t created a list before."}),"\n",(0,n.jsxs)(t.p,{children:["The test also uses a special annotation ",(0,n.jsx)(t.code,{children:"#[expected_failure]"})," that, as the name suggests, expects to fail with an ",(0,n.jsx)(t.code,{children:"E_NOT_INITIALIZED"})," error code."]}),"\n",(0,n.jsxs)(t.ol,{start:"6",children:["\n",(0,n.jsxs)(t.li,{children:["Run the ",(0,n.jsx)(t.code,{children:"aptos move test"})," command. If all goes right, we should see a success message like:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'Running Move unit tests\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::account_can_not_update_task\n[ PASS    ] 0xcbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018::todolist::test_flow\nTest result: OK. Total tests: 2; passed: 2; failed: 0\n{\n  "Result": "Success"\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Now that everything works, we can compile the Move modules and publish the Move package to chain so our React app (and everyone else) can interact with our smart contract!"}),"\n",(0,n.jsx)(t.h3,{id:"publish-todolist-module-to-chain",children:"Publish todolist module to chain"}),"\n",(0,n.jsx)(t.p,{children:"For now, the easiest way to publish a Move package to chain is using the CLI:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cd"})," into our ",(0,n.jsx)(t.code,{children:"move"})," directory, and run: ",(0,n.jsx)(t.code,{children:"aptos move compile"})]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["We are getting some ",(0,n.jsx)(t.em,{children:"Unused alias"})," errors. This is because we added the ",(0,n.jsx)(t.code,{children:"string"})," alias before since we use it in our tests. But we don't use this alias in our smart contract code."]}),"\n",(0,n.jsx)(t.p,{children:"This is why we are getting this error when we want to compile the module but not are getting it when we only run tests."}),"\n",(0,n.jsxs)(t.p,{children:["To fix it, we can add a ",(0,n.jsx)(t.code,{children:"use"})," statement that would be used only in tests."]}),"\n",(0,n.jsxs)(t.p,{children:["Add the following ",(0,n.jsx)(t.code,{children:"use"})," statement where we have all of our import statements."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"use std::string::String; // change to this\n...\n#[test_only]\nuse std::string; // add this\n"})}),"\n",(0,n.jsxs)(t.ol,{start:"2",children:["\n",(0,n.jsxs)(t.li,{children:["Run: ",(0,n.jsx)(t.code,{children:"aptos move test"})," and ",(0,n.jsx)(t.code,{children:"aptos move compile"})," - all should work without errors."]}),"\n",(0,n.jsxs)(t.li,{children:["Run: ",(0,n.jsx)(t.code,{children:"aptos move publish"})]}),"\n",(0,n.jsxs)(t.li,{children:["Enter ",(0,n.jsx)(t.code,{children:"yes"})," in the prompt."]}),"\n",(0,n.jsx)(t.li,{children:"That will compile, simulate and finally publish your module into devnet. You should see a success message:"}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:'{\n  "Result": {\n    "transaction_hash": "0x96b84689a53a28db7be6346627a99967f719946bc22766811a674e69da7783fa",\n    "gas_used": 7368,\n    "gas_unit_price": 100,\n    "sender": "cbddf398841353776903dbab2fdaefc54f181d07e114ae818b1a67af28d1b018",\n    "sequence_number": 2,\n    "success": true,\n    "timestamp_us": 1674246585276143,\n    "version": 651327,\n    "vm_status": "Executed successfully"\n  }\n}\n'})}),"\n",(0,n.jsxs)(t.ol,{start:"6",children:["\n",(0,n.jsxs)(t.li,{children:["You can now head to the ",(0,n.jsx)(t.a,{href:"https://explorer.aptoslabs.com/",children:"Aptos Explorer"}),", change the dropdown on the top right to the ",(0,n.jsx)(t.em,{children:"Devnet"})," network and look for that ",(0,n.jsx)(t.code,{children:"transaction_hash"})," value - this will show you the transaction details."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Now let's ",(0,n.jsx)(t.a,{href:"/tutorials/build-e2e-dapp/set-up-react-app",children:"set up a React app"})," in chapter 2."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},90135:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/build-e2e-dapp-img-1-86b39b407558b3e7c15af4e438f825c5.png"},83581:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>d});var n=s(11855);const o={},a=n.createContext(o);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);