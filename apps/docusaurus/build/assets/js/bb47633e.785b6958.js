"use strict";(self.webpackChunkaptos_docs=self.webpackChunkaptos_docs||[]).push([[9201],{57277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var s=t(63159),a=t(83581);const c={title:"Accounts",id:"accounts"},i="Accounts",o={id:"concepts/accounts",title:"Accounts",description:"An account on the Aptos blockchain represents access control over a set of assets including on-chain currency and NFTs. In Aptos, these assets are represented by a Move language primitive known as a resource that emphasizes both access control and scarcity.",source:"@site/i18n/ja/docusaurus-plugin-content-docs/current/concepts/accounts.md",sourceDirName:"concepts",slug:"/concepts/accounts",permalink:"/concepts/accounts",draft:!1,unlisted:!1,editUrl:"https://github.com/aptos-labs/developer-docs/edit/main/apps/docusaurus/docs/concepts/accounts.md",tags:[],version:"current",lastUpdatedAt:1713731976,formattedLastUpdatedAt:"2024\u5e744\u670821\u65e5",frontMatter:{title:"Accounts",id:"accounts"},sidebar:"aptosSidebar",previous:{title:"Move - A Web3 Language and Runtime",permalink:"/concepts/move-on-aptos"},next:{title:"Resources",permalink:"/concepts/resources"}},r={},d=[{value:"Account address",id:"account-address",level:2},{value:"Creating an account",id:"creating-an-account",level:2},{value:"Account sequence number",id:"account-sequence-number",level:2},{value:"Authentication key",id:"authentication-key",level:2},{value:"Ed25519 authentication",id:"ed25519-authentication",level:3},{value:"MultiEd25519 authentication",id:"multied25519-authentication",level:3},{value:"Generalized authentication",id:"generalized-authentication",level:3},{value:"Rotating the keys",id:"rotating-the-keys",level:2},{value:"State of an account",id:"state-of-an-account",level:2},{value:"Access control with signers",id:"access-control-with-signers",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"accounts",children:"Accounts"}),"\n",(0,s.jsxs)(n.p,{children:["An account on the Aptos blockchain represents access control over a set of assets including on-chain currency and NFTs. In Aptos, these assets are represented by a Move language primitive known as a ",(0,s.jsx)(n.strong,{children:"resource"})," that emphasizes both access control and scarcity."]}),"\n",(0,s.jsxs)(n.p,{children:["Each account on the Aptos blockchain is identified by a 32-byte account address. You can employ the ",(0,s.jsx)(n.a,{href:"/integration/aptos-names-service-package",children:"Aptos Name Service"})," at ",(0,s.jsx)(n.a,{href:"https://www.aptosnames.com/",children:"www.aptosnames.com"})," to secure .apt domains for key accounts to make them memorable and unique."]}),"\n",(0,s.jsxs)(n.p,{children:["Different from other blockchains where accounts and addresses are implicit, accounts on Aptos are explicit and need to be created before they can execute transactions. The account can be created explicitly or implicitly by transferring Aptos tokens (APT) there. See the ",(0,s.jsx)(n.a,{href:"#creating-an-account",children:"Creating an account"})," section for more details. In a way, this is similar to other chains where an address needs to be sent funds for gas before it can send transactions."]}),"\n",(0,s.jsx)(n.p,{children:"Explicit accounts allow first-class features that are not available on other networks such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Rotating authentication key. The account's authentication key can be changed to be controlled via a different private key. This is similar to changing passwords in the web2 world."}),"\n",(0,s.jsx)(n.li,{children:"Native multisig support. Accounts on Aptos support k-of-n multisig using both Ed25519 and Secp256k1 ECDSA signature schemes when constructing the authentication key."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"There are three types of accounts on Aptos:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"Standard account"})," - This is a typical account corresponding to an address with a corresponding pair of public/private keys."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/move/move-on-aptos/resource-accounts",children:(0,s.jsx)(n.em,{children:"Resource account"})})," - An autonomous account without a corresponding private key used by developers to store resources or publish modules on-chain."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/standards/aptos-object",children:(0,s.jsx)(n.em,{children:"Object"})})," - A complex set of resources stored within a single address representing a single entity."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Account address example",type:"tip",children:[(0,s.jsxs)(n.p,{children:["Account addresses are 32-bytes. They are usually shown as 64 hex characters, with each hex character a nibble.\nSometimes the address is prefixed with a 0x. See the ",(0,s.jsx)(n.a,{href:"/tutorials/your-first-transaction",children:"Your First Transaction"})," for an example\nof how an address appears, reproduced below:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Alice: 0xeeff357ea5c1a4e7bc11b2b17ff2dc2dcca69750bfef1e1ebcaccf8c8018175b\nBob: 0x19aadeca9388e009d136245b9a67423f3eee242b03142849eb4f81a4a409e59c\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"account-address",children:"Account address"}),"\n",(0,s.jsxs)(n.p,{children:["Currently, Aptos supports only a single, unified identifier for an account. Accounts on Aptos are universally represented as a 32-byte hex string. A hex string shorter than 32-bytes is also valid; in those scenarios, the hex string can be padded with leading zeroes, e.g., ",(0,s.jsx)(n.code,{children:"0x1x"})," => ",(0,s.jsx)(n.code,{children:"0x0000000000000...01"}),". While Aptos standards indicate leading zeroes may be removed from an Address, most applications attempt to eschew that legacy behavior and only support the removal of 0s for special addresses ranging from ",(0,s.jsx)(n.code,{children:"0x0"})," to ",(0,s.jsx)(n.code,{children:"0xa"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"creating-an-account",children:"Creating an account"}),"\n",(0,s.jsxs)(n.p,{children:["When a user requests to create an account, for example by using the ",(0,s.jsx)(n.a,{href:"https://aptos-labs.github.io/aptos-ts-sdk/@aptos-labs/ts-sdk-latest/classes/Account.html",children:"Aptos SDK"}),", the following steps are executed:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Select the authentication scheme for managing the user's account, e.g., Ed25519 or Secp256k1 ECDSA."}),"\n",(0,s.jsx)(n.li,{children:"Generate a new private key, public key pair."}),"\n",(0,s.jsx)(n.li,{children:"Combine the public key with the public key's authentication scheme to generate a 32-byte authentication key and the account address."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The user should use the private key for signing the transactions associated with this account."}),"\n",(0,s.jsx)(n.h2,{id:"account-sequence-number",children:"Account sequence number"}),"\n",(0,s.jsx)(n.p,{children:"The sequence number for an account indicates the number of transactions that have been submitted and committed on-chain from that account. Committed transactions either execute with the resulting state changes committed to the blockchain or abort wherein state changes are discarded and only the transaction is stored."}),"\n",(0,s.jsx)(n.p,{children:"Every transaction submitted must contain a unique sequence number for the given sender's account. When the Aptos blockchain processes the transaction, it looks at the sequence number in the transaction and compares it with the sequence number in the on-chain account. The transaction is processed only if the sequence number is equal to or larger than the current sequence number. Transactions are only forwarded to other mempools or executed if there is a contiguous series of transactions from the current sequence number. Execution rejects out of order sequence numbers preventing replay attacks of older transactions and guarantees ordering of future transactions."}),"\n",(0,s.jsx)(n.h2,{id:"authentication-key",children:"Authentication key"}),"\n",(0,s.jsx)(n.p,{children:"The initial account address is set to the authentication key derived during account creation. However, the authentication key may subsequently change, for example when you generate a new public-private key pair, public keys to rotate the keys. An account address never changes."}),"\n",(0,s.jsx)(n.p,{children:"The Aptos blockchain supports the following authentication schemes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://ed25519.cr.yp.to/",children:"Ed25519"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-49.md",children:"Secp256k1 ECDSA"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-55.md",children:"K-of-N multi-signatures"})}),"\n",(0,s.jsx)(n.li,{children:"A dedicated, now legacy, MultiEd25519 scheme"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The Aptos blockchain defaults to Ed25519 signature transactions."})}),"\n",(0,s.jsx)(n.h3,{id:"ed25519-authentication",children:"Ed25519 authentication"}),"\n",(0,s.jsx)(n.p,{children:"To generate an authentication key and the account address for an Ed25519 signature:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generate a key-pair"}),": Generate a fresh key-pair (",(0,s.jsx)(n.code,{children:"privkey_A"}),", ",(0,s.jsx)(n.code,{children:"pubkey_A"}),"). The Aptos blockchain uses the PureEdDSA scheme over the Ed25519 curve, as defined in RFC 8032."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Derive a 32-byte authentication key"}),": Derive a 32-byte authentication key from the ",(0,s.jsx)(n.code,{children:"pubkey_A"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"auth_key = sha3-256(pubkey_A | 0x00)\n"})}),"\n","where ",(0,s.jsx)(n.code,{children:"|"})," denotes concatenation. The ",(0,s.jsx)(n.code,{children:"0x00"})," is the 1-byte single-signature scheme identifier."]}),"\n",(0,s.jsx)(n.li,{children:"Use this initial authentication key as the permanent account address."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multied25519-authentication",children:"MultiEd25519 authentication"}),"\n",(0,s.jsx)(n.p,{children:"With K-of-N multisig authentication, there are a total of N signers for the account, and at least K of those N signatures\nmust be used to authenticate a transaction."}),"\n",(0,s.jsx)(n.p,{children:"To generate a K-of-N multisig account's authentication key and the account address:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generate key-pairs"}),": Generate ",(0,s.jsx)(n.code,{children:"N"})," ed25519 public keys ",(0,s.jsx)(n.code,{children:"p_1"}),", ..., ",(0,s.jsx)(n.code,{children:"p_n"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Decide on the value of ",(0,s.jsx)(n.code,{children:"K"}),", the threshold number of signatures needed for authenticating the transaction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Derive a 32-byte authentication key"}),": Compute the authentication key as described below:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"auth_key = sha3-256(p_1 | . . . | p_n | K | 0x01)\n"})}),"\n","The ",(0,s.jsx)(n.code,{children:"0x01"})," is the 1-byte multisig scheme identifier."]}),"\n",(0,s.jsx)(n.li,{children:"Use this initial authentication key as the permanent account address."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"generalized-authentication",children:"Generalized authentication"}),"\n",(0,s.jsxs)(n.p,{children:["Generalized authentication supports both Ed25519 and Secp256k1 ECDSA. Like the previous authentication schemes, these schemes contain a scheme value, ",(0,s.jsx)(n.code,{children:"0x02"})," and ",(0,s.jsx)(n.code,{children:"0x03"})," for single and multikey respectively, but also each key contains a prefix value to indicate its key type:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1-byte Ed25519 generalized scheme"}),": ",(0,s.jsx)(n.code,{children:"0x00"}),","]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1-byte Secp256k1 ECDSA generalized scheme"}),": ",(0,s.jsx)(n.code,{children:"0x01"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For a single key Secp256k1 ECDSA account, using public key ",(0,s.jsx)(n.code,{children:"pubkey"}),", the authentication key would be derived as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"auth_key = sha3-256(0x01 | pubkey | 0x02)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the first entry, ",(0,s.jsx)(n.code,{children:"0x01"}),", represents the use of a Secp256k1 ECDSA key;"]}),"\n",(0,s.jsxs)(n.li,{children:["the last entry, ",(0,s.jsx)(n.code,{children:"0x02"}),", represents the authentication scheme."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For a multi-key account containing, a single Secp256k1 ECDSA public key, ",(0,s.jsx)(n.code,{children:"pubkey_0"}),", and a single Ed25519 public key, ",(0,s.jsx)(n.code,{children:"pubkey_1"}),", where one signature suffices, the authentication key would be derived as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"auth_key = sha3-256(0x02 | 0x01 | pubkey_0 | 0x02 | pubkey_2 | 0x01 | 0x03)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["the first entry, ",(0,s.jsx)(n.code,{children:"0x02"}),", represents the total number of keys as a single byte;"]}),"\n",(0,s.jsxs)(n.li,{children:["the second to last entry, ",(0,s.jsx)(n.code,{children:"0x01"}),", represents the required number of signatures as a single byte;"]}),"\n",(0,s.jsxs)(n.li,{children:["the last entry, ",(0,s.jsx)(n.code,{children:"0x03"}),", represents the authentication scheme."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rotating-the-keys",children:"Rotating the keys"}),"\n",(0,s.jsxs)(n.p,{children:["An Account on Aptos has the ability to rotate keys so that potentially compromised keys cannot be used to access the accounts. Keys can be rotated via the ",(0,s.jsx)(n.code,{children:"account::rotate_authentication_key"})," function."]}),"\n",(0,s.jsx)(n.p,{children:"Refreshing the keys is generally regarded as good hygiene in the security field. However, this presents a challenge for system integrators who are used to using a mnemonic to represent both a private key and its associated account. To simplify this for the system integrators, Aptos provides an on-chain mapping via aptos account lookup-address. The on-chain data maps an effective account address as defined by the current mnemonic to the actual account address."}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see ",(0,s.jsx)(n.a,{href:"https://github.com/aptos-labs/aptos-core/blob/a676c1494e246c31c5e96d3363d99e2422e30f49/aptos-move/framework/aptos-framework/sources/account.move#L274",children:(0,s.jsx)(n.code,{children:"account.move"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"state-of-an-account",children:"State of an account"}),"\n",(0,s.jsx)(n.p,{children:"The state of each account comprises both the code (Move modules) and the data (Move resources). An account may contain an arbitrary number of Move modules and Move resources:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Move modules"}),": Move modules contain code, for example, type and procedure declarations; but they do not contain data. A Move module encodes the rules for updating the Aptos blockchain's global state."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Move resources"}),": Move resources contain data but no code. Every resource value has a type that is declared in a module published on the Aptos blockchain."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"access-control-with-signers",children:"Access control with signers"}),"\n",(0,s.jsxs)(n.p,{children:["The sender of a transaction is represented by a signer. When a function in a Move module takes ",(0,s.jsx)(n.code,{children:"signer"})," as an argument, the Aptos Move VM translates the identity of the account that signed the transaction into a signer in a Move module entry point. See the below Move example code with ",(0,s.jsx)(n.code,{children:"signer"})," in the ",(0,s.jsx)(n.code,{children:"initialize"})," and ",(0,s.jsx)(n.code,{children:"withdraw"})," functions. When a ",(0,s.jsx)(n.code,{children:"signer"})," is not specified in a function, for example, the below ",(0,s.jsx)(n.code,{children:"deposit"})," function, then no signer-based access controls will be provided for this function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"module Test::Coin {\n  struct Coin has key { amount: u64 }\n\n  public fun initialize(account: &signer) {\n    move_to(account, Coin { amount: 1000 });\n  }\n\n  public fun withdraw(account: &signer, amount: u64): Coin acquires Coin {\n    let balance = &mut borrow_global_mut<Coin>(Signer::address_of(account)).amount;\n    *balance = *balance - amount;\n    Coin { amount }\n  }\n\n  public fun deposit(account: address, coin: Coin) acquires Coin {\n      let balance = &mut borrow_global_mut<Coin>(account).amount;\n      *balance = *balance + coin.amount;\n      Coin { amount: _ } = coin;\n  }\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},83581:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(11855);const a={},c=s.createContext(a);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);